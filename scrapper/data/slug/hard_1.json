{"models":[{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":50,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":50,"expert_solution_status":false,"custom_tabs":null,"total_count":13213,"solved_count":10848,"success_ratio":0.8210096117460077,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":8696,"slug":"maximize-it","name":"Maximize It!","status":null,"created_at":"2015-06-11T08:31:31.000Z","updated_at":"2018-02-06T07:16:26.000Z","kind":"code","preview":"Find the maximum possible value out of the equation provided.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.5,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Hard","hints":[],"tag_names":["python","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":80,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":80,"expert_solution_status":false,"custom_tabs":null,"total_count":5156,"solved_count":4442,"success_ratio":0.8615205585725368,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12538,"slug":"validating-postalcode","name":"Validating Postal Codes","status":null,"created_at":"2015-09-20T14:11:18.000Z","updated_at":"2018-04-22T09:08:44.000Z","kind":"code","preview":"Verify if the postal code is valid or invalid.","category":"ai","deleted":false,"company_id":null,"is_custom":true,"player_count":2,"custom_checker_language":"python","checker_program":"\nimport json\nfrom sys import stdin\n\n\ndef check_inputs (inputs, outputs, signals ):\n    scores = []\n    valid = []\n    total_count = 0.0\n    total_correct = 0.0\n    iter_signal = 0\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n \n        count = len(inps.strip().split())\n        correct = -count*1.0\n \n        total_count += count\n \n        if signals[iter_signal] != 0 or len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            valid.append(0)\n\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                if inp == outp:\n                    correct+=2\n \n            total_correct += correct\n            correct /= count\n            if correct \u003e 0:\n                valid.append(1)\n            else:\n                valid.append(0)\n \n            iter_signal += 1\n \n    return valid, total_correct/total_count\n \ndef process(data):\n    valid, score = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"signals\"])\n    if score \u003c= 0:\n        score = 0\n    return score, valid\n \nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n \n    run_directory = stdin[0]\n \n    request = json.load(open(run_directory + \"request.json\"))\n \n \n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n \n        \"testcases\": request[\"testcase_sources\"],\n \n        \"lang\": request[\"lang\"],\n \n        \"expected_outputs\": request[\"expected_outputs\"],\n \n        \"outputs\": [],\n \n        \"signals\":[]\n    }\n \n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n \n\n    \n    score, testcase_status = process(data)                  \n\n    for word in [\"if\"]:\n        flag1 = 0\n        for line in data[\"source\"].split('\\n'):\n            if word in line.split():\n                score = 0\n                testcase_status = [0]*len(testcase_status)\n                flag1 = 1\n                break\n        if flag1 == 1:\n            break\n    \n    if score \u003c 1:\n        score = 0\n#        testcase_status = [0]*len(testcase_status)\n          \n    print score\n    print \" \".join(str(i) for i in testcase_status)\n","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":true,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.5,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Hard","hints":[],"tag_names":["RegEx","python","pythonist 3","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":100,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":100,"expert_solution_status":false,"custom_tabs":null,"total_count":4818,"solved_count":4321,"success_ratio":0.8968451639684516,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12524,"slug":"matrix-script","name":"Matrix Script","status":null,"created_at":"2015-09-20T05:12:25.000Z","updated_at":"2018-05-11T07:58:53.000Z","kind":"code","preview":"Decode the Matrix.","category":"ai","deleted":false,"company_id":null,"is_custom":true,"player_count":2,"custom_checker_language":"python","checker_program":"\nimport json\nfrom sys import stdin\n\n\ndef check_inputs (inputs, outputs, signals ):\n    scores = []\n    valid = []\n    total_count = 0.0\n    total_correct = 0.0\n    iter_signal = 0\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n \n        count = len(inps.strip().split())\n        correct = -count*1.0\n \n        total_count += count\n \n        if signals[iter_signal] != 0 or len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            valid.append(0)\n\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                if inp == outp:\n                    correct+=2\n \n            total_correct += correct\n            correct /= count\n            if correct \u003e 0:\n                valid.append(1)\n            else:\n                valid.append(0)\n \n            iter_signal += 1\n \n    return valid, total_correct/total_count\n \ndef process(data):\n    valid, score = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"signals\"])\n    if score \u003c= 0:\n        score = 0\n    return score, valid\n \nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n \n    run_directory = stdin[0]\n \n    request = json.load(open(run_directory + \"request.json\"))\n \n \n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n \n        \"testcases\": request[\"testcase_sources\"],\n \n        \"lang\": request[\"lang\"],\n \n        \"expected_outputs\": request[\"expected_outputs\"],\n \n        \"outputs\": [],\n \n        \"signals\":[]\n    }\n \n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n \n\n    \n    score, testcase_status = process(data)                  \n\n    for word in [\"if\"]:\n        flag1 = 0\n        for line in data[\"source\"].split('\\n'):\n            if word in line.split():\n                score = 0\n                testcase_status = [0]*len(testcase_status)\n                flag1 = 1\n                break\n        if flag1 == 1:\n            break\n    \n#    if score \u003c 1:\n#        score = 0\n#        testcase_status = [0]*len(testcase_status)\n          \n    print score\n    print \" \".join(str(i) for i in testcase_status)\n","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":true,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.5,"color":null,"solved_score":0.99,"preview_format":null,"difficulty_name":"Hard","hints":[],"tag_names":["RegEx","python","pythonist 3","Core CS","Language-Specific"]}],"first_unsolved_challenge":null,"total":3,"tutorial_signed_up":true,"current_track":{"id":12,"name":"Python","slug":"python","priority":8,"descriptions":"A step by step guide to Python, a language that is easy to pick up yet one of the most powerful.","rewards_system_enabled":null},"promo":{"meta":null,"type":"other"}}