{"models":[{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":17953,"solved_count":17730,"success_ratio":0.9875786776583301,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9022,"slug":"py-check-subset","name":"Check Subset","status":null,"created_at":"2015-06-30T17:50:01.000Z","updated_at":"2018-03-14T09:32:21.000Z","kind":"code","preview":"Verify if set A is a subset of set B.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"python","checker_program":"import json\nfrom sys import stdin\n\n\ndef check_inputs (inputs, outputs, signals ):\n    scores = []\n    valid = []\n    total_count = 0.0\n    total_correct = 0.0\n    iter_signal = 0\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n \n        count = len(inps.strip().split())\n        correct = -count*1.0\n \n        total_count += count\n \n        if signals[iter_signal] != 0 or len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            valid.append(0)\n\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                if inp == outp:\n                    correct+=2\n \n            total_correct += correct\n            correct /= count\n            if correct \u003e 0:\n                valid.append(1)\n            else:\n                valid.append(0)\n \n            iter_signal += 1\n \n    return valid, total_correct/total_count\n \ndef process(data):\n    valid, score = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"signals\"])\n    if score \u003c= 0:\n        score = 0\n    return score, valid\n \nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n \n    run_directory = stdin[1]\n \n    request = json.load(open(run_directory + \"request.json\"))\n \n \n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n \n        \"testcases\": request[\"testcase_sources\"],\n \n        \"lang\": request[\"lang\"],\n \n        \"expected_outputs\": request[\"expected_outputs\"],\n \n        \"outputs\": [],\n \n        \"signals\":[]\n    }\n \n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n \n\n    \n    score, testcase_status = process(data)                  \n\n    count = 0\n    for i in data[\"source\"].split('\\n'):\n        if set(i) == set([' ']) or set(i) == set(\"\"):\n            count += 1\n    if len(data[\"source\"].split('\\n')) \u003e int(4) + count:\n        score = 0\n        testcase_status = [0]*len(testcase_status)\n    \n    if score \u003c 1:\n        score = 0\n        testcase_status = [0]*len(testcase_status)\n          \n    print score\n    print \" \".join(str(i) for i in testcase_status)","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":16888,"solved_count":16166,"success_ratio":0.9572477498815727,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9456,"slug":"py-check-strict-superset","name":"Check Strict Superset","status":null,"created_at":"2015-07-26T16:39:14.000Z","updated_at":"2017-05-26T08:35:07.000Z","kind":"code","preview":"Check if A is a strict superset of the other given sets.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"python","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":6791,"solved_count":6630,"success_ratio":0.9762921513768222,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":42,"name":"Classes","slug":"py-classes","track_id":12,"track_name":"Python","track_slug":"python"},"id":1654,"slug":"class-2-find-the-torsional-angle","name":"Class 2 - Find the Torsional Angle","status":null,"created_at":"2014-01-12T00:21:36.000Z","updated_at":"2016-12-18T13:50:50.000Z","kind":"code","preview":"Find the angle between two planes.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9245283018867925,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Classes","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":10790,"solved_count":10541,"success_ratio":0.9769230769230769,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":125,"name":"Built-Ins","slug":"py-built-ins","track_id":12,"track_name":"Python","track_slug":"python"},"id":11741,"slug":"zipped","name":"Zipped!","status":null,"created_at":"2015-08-27T09:15:01.000Z","updated_at":"2016-12-08T08:34:23.000Z","kind":"code","preview":"Compute the average by zipping data.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorials","Core CS","Language-Specific","Python Builtins"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"```python\nx = 2\nprint eval ('x+1')\n```\nOutput of this code = $3$\n\nSo , eval('expression') is used to evaluate an expression . It is used to find the value of the expression , given the values of all the variables involved in that expression.\n\n***input() and eval() perform the same task of evaluating an expression.***\n\n**input() is equivalent to eval(raw_input()) . Let us see how :**\n\nFor the given question the code using input() is as follows:\n\n```python\nx,k = map ( int , raw_input().split())\nprint input() == k\n```\n\nAnd the code using eval( raw_input() ) is as follows:\n\n```python\nx,k = map ( int , raw_input().split())\nprint eval(raw_input()) == k\n```\nThe code using eval() is as follows :\n\n```python\nx,k = map ( int , raw_input().split())\ns= raw_input()\nprint eval(s) == k\n```","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"s1\"\u003e'x+1'\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eOutput of this code = \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e\u003c/p\u003e\n\n\u003cp\u003eSo , eval('expression') is used to evaluate an expression . It is used to find the value of the expression , given the values of all the variables involved in that expression.\u003c/p\u003e\n\n\u003cp\u003e\u003cem\u003e\u003cstrong\u003einput() and eval() perform the same task of evaluating an expression.\u003c/strong\u003e\u003c/em\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003einput() is equivalent to eval(raw_input()) . Let us see how :\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eFor the given question the code using input() is as follows:\u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAnd the code using eval( raw_input() ) is as follows:\u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThe code using eval() is as follows :\u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003ex\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"n\"\u003ek\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003emap\u003c/span\u003e \u003cspan class=\"p\"\u003e(\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e \u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003eeval\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003es\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e \u003cspan class=\"o\"\u003e==\u003c/span\u003e \u003cspan class=\"n\"\u003ek\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n","sidebar":""}],"total_count":10199,"solved_count":9817,"success_ratio":0.9625453475830964,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":125,"name":"Built-Ins","slug":"py-built-ins","track_id":12,"track_name":"Python","track_slug":"python"},"id":12190,"slug":"input","name":"Input()","status":null,"created_at":"2015-09-12T13:07:07.000Z","updated_at":"2016-12-08T08:34:24.000Z","kind":"code","preview":"A Python 2 challenge: Input() is equivalent to eval(raw_input(prompt)).","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","Python Builtins"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":12463,"solved_count":12201,"success_ratio":0.9789777742116665,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":125,"name":"Built-Ins","slug":"py-built-ins","track_id":12,"track_name":"Python","track_slug":"python"},"id":8531,"slug":"python-eval","name":"Python Evaluation","status":null,"created_at":"2015-05-31T11:07:54.000Z","updated_at":"2018-01-11T09:43:17.000Z","kind":"code","preview":"Evaluate the expressions in Python using the expression eval().","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","Python Builtins"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10334,"solved_count":9759,"success_ratio":0.9443584284884846,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":125,"name":"Built-Ins","slug":"py-built-ins","track_id":12,"track_name":"Python","track_slug":"python"},"id":12189,"slug":"any-or-all","name":"Any or All","status":null,"created_at":"2015-09-12T13:06:12.000Z","updated_at":"2016-12-08T08:34:27.000Z","kind":"code","preview":"Return True, if any of the iterable is true or if all of it is true using the any() and all() expressions.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","Python Builtins"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"###\u003csub\u003e[re](https://docs.python.org/2/library/re.html#module-re)\u003c/sub\u003e\n\nA regular expression (or RegEx) specifies a set of strings that matches it.  \n\nA [regex](https://en.wikipedia.org/wiki/Regular_expression) is a sequence of characters that defines a search pattern, mainly for the use of string pattern matching.\n\n\n\u003cbr\u003e\nThe [__re.search()__](https://docs.python.org/2/library/re.html#re.search) expression scans through a string looking for the *first* location where the regex pattern produces a match.  \nIt either returns a `MatchObject` instance or returns `None` if no position in the string matches the pattern.\n\n\u003csub\u003e__Code__\u003c/sub\u003e\n\n\t\u003e\u003e\u003e import re\n    \u003e\u003e\u003e print bool(re.search(r\"ly\",\"similarly\"))\n\tTrue\n\n\n\u003cbr\u003e\nThe [__re.match()__](https://docs.python.org/2/library/re.html#re.match) expression only matches at the *beginning* of the string.  \nIt either returns a `MatchObject` instance or returns `None` if the string does not match the pattern.  \n\u003csub\u003e__Code__\u003c/sub\u003e\n\n    \u003e\u003e\u003e import re\n    \u003e\u003e\u003e print bool(re.match(r\"ly\",\"similarly\"))\n    False\n    \u003e\u003e\u003e print bool(re.match(r\"ly\",\"ly should be in the beginning\"))\n    True","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003ch3\u003e\u003csub\u003e\u003ca href=\"https://docs.python.org/2/library/re.html#module-re\"\u003ere\u003c/a\u003e\u003c/sub\u003e\u003c/h3\u003e\n\n\u003cp\u003eA regular expression (or RegEx) specifies a set of strings that matches it.  \u003c/p\u003e\n\n\u003cp\u003eA \u003ca href=\"https://en.wikipedia.org/wiki/Regular_expression\"\u003eregex\u003c/a\u003e is a sequence of characters that defines a search pattern, mainly for the use of string pattern matching.\u003c/p\u003e\n\n\u003cp\u003e\u003cbr\u003e\nThe \u003ca href=\"https://docs.python.org/2/library/re.html#re.search\"\u003e\u003cstrong\u003ere.search()\u003c/strong\u003e\u003c/a\u003e expression scans through a string looking for the \u003cem\u003efirst\u003c/em\u003e location where the regex pattern produces a match. \u003cbr\u003e\nIt either returns a \u003ccode\u003eMatchObject\u003c/code\u003e instance or returns \u003ccode\u003eNone\u003c/code\u003e if no position in the string matches the pattern.\u003c/p\u003e\n\n\u003cp\u003e\u003csub\u003e\u003cstrong\u003eCode\u003c/strong\u003e\u003c/sub\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; import re\n\u0026gt;\u0026gt;\u0026gt; print bool(re.search(r\"ly\",\"similarly\"))\nTrue\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003cbr\u003e\nThe \u003ca href=\"https://docs.python.org/2/library/re.html#re.match\"\u003e\u003cstrong\u003ere.match()\u003c/strong\u003e\u003c/a\u003e expression only matches at the \u003cem\u003ebeginning\u003c/em\u003e of the string. \u003cbr\u003e\nIt either returns a \u003ccode\u003eMatchObject\u003c/code\u003e instance or returns \u003ccode\u003eNone\u003c/code\u003e if the string does not match the pattern. \u003cbr\u003e\n\u003csub\u003e\u003cstrong\u003eCode\u003c/strong\u003e\u003c/sub\u003e\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; import re\n\u0026gt;\u0026gt;\u0026gt; print bool(re.match(r\"ly\",\"similarly\"))\nFalse\n\u0026gt;\u0026gt;\u0026gt; print bool(re.match(r\"ly\",\"ly should be in the beginning\"))\nTrue\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/introduction-to-regex/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":10491,"solved_count":9574,"success_ratio":0.9125917453054999,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12177,"slug":"introduction-to-regex","name":"Detect Floating Point Number","status":null,"created_at":"2015-09-12T11:43:28.000Z","updated_at":"2018-02-08T10:27:00.000Z","kind":"code","preview":"Validate a floating point number using the regular expression module for Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":16359,"solved_count":15290,"success_ratio":0.9346537074393301,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":87,"name":"Python Functionals","slug":"py-functionals","track_id":12,"track_name":"Python","track_slug":"python"},"id":1564,"slug":"map-and-lambda-expression","name":"Map and Lambda Function","status":null,"created_at":"2013-12-18T21:09:21.000Z","updated_at":"2017-01-27T15:56:44.000Z","kind":"code","preview":"This challenge covers the basic concept of maps and lambda expressions.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.918552036199095,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Core CS","Language-Specific","Functionals"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"###\u003csub\u003e[re.split()](https://docs.python.org/2/library/re.html#re.split)\u003c/sub\u003e  \nThe *re.split()* expression splits the string by occurrence of a pattern.\n\n\u003csub\u003e__Code__\u003c/sub\u003e\n\n```python\n\u003e\u003e\u003e import re\n\u003e\u003e\u003e re.split(r\"-\",\"+91-011-2711-1111\")\n['+91', '011', '2711', '1111']\n```","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003ch3\u003e\u003csub\u003e\u003ca href=\"https://docs.python.org/2/library/re.html#re.split\"\u003ere.split()\u003c/a\u003e\u003c/sub\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cem\u003ere.split()\u003c/em\u003e expression splits the string by occurrence of a pattern.\u003c/p\u003e\n\n\u003cp\u003e\u003csub\u003e\u003cstrong\u003eCode\u003c/strong\u003e\u003c/sub\u003e\u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"nn\"\u003ere\u003c/span\u003e\n\u003cspan class=\"o\"\u003e\u0026gt;\u0026gt;\u0026gt;\u003c/span\u003e \u003cspan class=\"n\"\u003ere\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esplit\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"sa\"\u003er\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"-\"\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"s2\"\u003e\"+91-011-2711-1111\"\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'+91'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'011'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'2711'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'1111'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/re-split/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":11023,"solved_count":10187,"success_ratio":0.9241585775197315,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12182,"slug":"re-split","name":"Re.split()","status":null,"created_at":"2015-09-12T12:55:01.000Z","updated_at":"2018-02-08T10:55:15.000Z","kind":"code","preview":"Split the string by the pattern occurrence using the re.split() expression.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":7755,"solved_count":7184,"success_ratio":0.9263700838168923,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12183,"slug":"re-group-groups","name":"Group(), Groups() \u0026 Groupdict()","status":null,"created_at":"2015-09-12T12:55:32.000Z","updated_at":"2016-12-08T08:34:34.000Z","kind":"code","preview":"Using group(), groups(), and groupdict(), find the subgroup(s) of the match.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":6658,"solved_count":5867,"success_ratio":0.8811955542204867,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12184,"slug":"re-findall-re-finditer","name":"Re.findall() \u0026 Re.finditer()","status":null,"created_at":"2015-09-12T12:56:45.000Z","updated_at":"2016-12-08T08:34:35.000Z","kind":"code","preview":"Find all the pattern matches using the expressions re.findall() and re.finditer().","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":5539,"solved_count":5248,"success_ratio":0.947463441054342,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12185,"slug":"re-start-re-end","name":"Re.start() \u0026 Re.end()","status":null,"created_at":"2015-09-12T13:01:25.000Z","updated_at":"2016-12-08T08:34:35.000Z","kind":"code","preview":"Find the indices of the start and end of the substring matched by the group.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":5540,"solved_count":5005,"success_ratio":0.9034296028880866,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":1604,"slug":"validate-a-roman-number","name":"Validating Roman Numerals","status":null,"created_at":"2013-12-25T18:54:46.000Z","updated_at":"2018-02-08T10:58:26.000Z","kind":"code","preview":"Use regex to validate Roman numerals.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":8230,"solved_count":7883,"success_ratio":0.9578371810449575,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":1558,"slug":"validating-the-phone-number","name":"Validating phone numbers","status":null,"created_at":"2013-12-17T19:37:45.000Z","updated_at":"2018-05-23T18:40:41.000Z","kind":"code","preview":"Check whether the given phone number is valid or not.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":5589,"solved_count":4849,"success_ratio":0.8675970656646985,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12109,"slug":"validating-named-email-addresses","name":"Validating and Parsing Email Addresses","status":null,"created_at":"2015-09-10T13:53:34.000Z","updated_at":"2016-12-08T08:34:40.000Z","kind":"code","preview":"Print valid email addresses according to the constraints.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":4935,"solved_count":4736,"success_ratio":0.9596757852077001,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":9714,"slug":"hex-color-code","name":"Hex Color Code","status":null,"created_at":"2015-08-08T13:38:56.000Z","updated_at":"2016-12-08T08:34:40.000Z","kind":"code","preview":"Validate Hex color codes in CSS.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","pythonist 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":3834,"solved_count":3634,"success_ratio":0.9478351591027647,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":11657,"slug":"html-parser-part-1","name":"HTML Parser - Part 1","status":null,"created_at":"2015-08-24T10:52:18.000Z","updated_at":"2016-12-08T08:34:42.000Z","kind":"code","preview":"Parse HTML tags, attributes and attribute values using HTML Parser.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","pythonist tutorial","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":3402,"solved_count":3349,"success_ratio":0.9844209288653734,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":11665,"slug":"html-parser-part-2","name":"HTML Parser - Part 2","status":null,"created_at":"2015-08-24T17:22:28.000Z","updated_at":"2016-12-08T08:34:43.000Z","kind":"code","preview":"Parse HTML comments and data using HTML Parser.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","pythonist tutorial","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":3371,"solved_count":3291,"success_ratio":0.9762681696825868,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":9719,"slug":"detect-html-tags-attributes-and-attribute-values","name":"Detect HTML Tags, Attributes and Attribute Values","status":null,"created_at":"2015-08-09T10:50:36.000Z","updated_at":"2016-12-08T08:34:43.000Z","kind":"code","preview":"Parse HTML tags, attributes and attribute values in this challenge.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","pythonist 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":5011,"solved_count":4892,"success_ratio":0.976252245060866,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":89,"name":"XML","slug":"xml","track_id":12,"track_name":"Python","track_slug":"python"},"id":1605,"slug":"xml-1-find-the-score","name":"XML 1 - Find the Score","status":null,"created_at":"2013-12-25T20:10:25.000Z","updated_at":"2016-12-19T10:46:11.000Z","kind":"code","preview":"Learn about XML parsing in Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9637681159420289,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","XML"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":40,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":40,"expert_solution_status":false,"custom_tabs":null,"total_count":4285,"solved_count":4107,"success_ratio":0.9584597432905484,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12187,"slug":"validating-uid","name":"Validating UID ","status":null,"created_at":"2015-09-12T13:04:12.000Z","updated_at":"2016-12-08T08:34:44.000Z","kind":"code","preview":"Validate all the randomly generated user identification numbers according to the constraints.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":4281,"solved_count":4134,"success_ratio":0.9656622284512965,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":89,"name":"XML","slug":"xml","track_id":12,"track_name":"Python","track_slug":"python"},"id":1652,"slug":"xml2-find-the-maximum-depth","name":"XML2 - Find the Maximum Depth","status":null,"created_at":"2014-01-11T20:19:14.000Z","updated_at":"2016-12-23T00:21:59.000Z","kind":"code","preview":"Find the maximum depth in an XML document.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.8543689320388349,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","XML"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":7077,"solved_count":6920,"success_ratio":0.9778154585276247,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":90,"name":"Closures and Decorators","slug":"closures-and-decorators","track_id":12,"track_name":"Python","track_slug":"python"},"id":1620,"slug":"standardize-mobile-number-using-decorators","name":"Standardize Mobile Number Using Decorators","status":null,"created_at":"2014-01-05T17:05:59.000Z","updated_at":"2018-05-23T18:38:58.000Z","kind":"code","preview":"Use decorators to standardize mobile numbers.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9493243243243243,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","Closures and Decorators"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":6217,"solved_count":5718,"success_ratio":0.919736207173878,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":90,"name":"Closures and Decorators","slug":"closures-and-decorators","track_id":12,"track_name":"Python","track_slug":"python"},"id":1621,"slug":"decorators-2-name-directory","name":"Decorators 2 - Name Directory","status":null,"created_at":"2014-01-06T08:04:19.000Z","updated_at":"2017-06-02T13:37:59.000Z","kind":"code","preview":"Use decorators to build a name directory.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9536423841059603,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","Closures and Decorators"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":17571,"solved_count":16737,"success_ratio":0.9525354276933584,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":5176,"slug":"np-arrays","name":"Arrays","status":null,"created_at":"2014-11-14T12:09:05.000Z","updated_at":"2017-06-15T13:54:05.000Z","kind":"code","preview":"Convert a list to an array using the NumPy package. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","wave 4","numpy","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":15165,"solved_count":14667,"success_ratio":0.9671612265084075,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":8094,"slug":"np-shape-reshape","name":"Shape and Reshape","status":null,"created_at":"2015-04-30T12:39:08.000Z","updated_at":"2016-12-08T08:34:52.000Z","kind":"code","preview":"Using the shape and reshape tools available in the NumPy module, configure a list according to the guidelines. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","shape-and-reshape","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":12530,"solved_count":12157,"success_ratio":0.9702314445331205,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13496,"slug":"np-transpose-and-flatten","name":"Transpose and Flatten","status":null,"created_at":"2015-10-16T11:05:32.000Z","updated_at":"2016-12-08T08:34:53.000Z","kind":"code","preview":"Use the transpose and flatten tools in the NumPy module to manipulate an array.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Transpose and Flatten","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10550,"solved_count":10459,"success_ratio":0.9913744075829384,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13497,"slug":"np-concatenate","name":"Concatenate","status":null,"created_at":"2015-10-16T11:06:38.000Z","updated_at":"2016-12-08T08:34:53.000Z","kind":"code","preview":"Use the concatenate function on 2 arrays.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Concatenate","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10281,"solved_count":9720,"success_ratio":0.945433323606653,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13498,"slug":"np-zeros-and-ones","name":"Zeros and Ones","status":null,"created_at":"2015-10-16T11:07:36.000Z","updated_at":"2017-02-17T22:04:27.000Z","kind":"code","preview":"Print an array using the zeros and ones tools in the NumPy module. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Zeros and Ones","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":9948,"solved_count":9516,"success_ratio":0.9565741857659831,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13499,"slug":"np-eye-and-identity","name":"Eye and Identity","status":null,"created_at":"2015-10-16T11:08:44.000Z","updated_at":"2016-12-08T08:34:55.000Z","kind":"code","preview":"Create an array using the identity or eye tools from the NumPy module. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Eye and Identity","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":8967,"solved_count":8515,"success_ratio":0.9495929519348724,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13500,"slug":"np-array-mathematics","name":"Array Mathematics","status":null,"created_at":"2015-10-16T11:09:45.000Z","updated_at":"2018-05-23T06:16:51.000Z","kind":"code","preview":"Perform basic mathematical operations on arrays in NumPy.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Array Mathematics","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":9009,"solved_count":8731,"success_ratio":0.9691419691419692,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13501,"slug":"floor-ceil-and-rint","name":"Floor, Ceil and Rint","status":null,"created_at":"2015-10-16T11:10:33.000Z","updated_at":"2016-12-08T08:34:57.000Z","kind":"code","preview":"Use the floor, ceil and rint tools of NumPy on the given array.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Floor Ceil and Rint","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":8801,"solved_count":8658,"success_ratio":0.983751846381093,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13502,"slug":"np-sum-and-prod","name":"Sum and Prod","status":null,"created_at":"2015-10-16T11:11:37.000Z","updated_at":"2016-12-08T08:34:57.000Z","kind":"code","preview":"Perform the sum and prod functions of NumPy on the given 2-D array.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Sum and Prod","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":8895,"solved_count":8785,"success_ratio":0.9876335019673974,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13503,"slug":"np-min-and-max","name":"Min and Max","status":null,"created_at":"2015-10-16T11:12:30.000Z","updated_at":"2016-12-08T08:34:58.000Z","kind":"code","preview":"Use the min and max tools of NumPy on the given 2-D array. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Min and Max","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":8324,"solved_count":8030,"success_ratio":0.9646804420951466,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13504,"slug":"np-mean-var-and-std","name":"Mean, Var, and Std","status":null,"created_at":"2015-10-16T11:14:22.000Z","updated_at":"2016-12-08T08:34:59.000Z","kind":"code","preview":"Use the mean, var and std tools in NumPy on the given 2-D array. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Mean Var and Std","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":7987,"solved_count":7900,"success_ratio":0.9891072993614624,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13505,"slug":"np-dot-and-cross","name":"Dot and Cross","status":null,"created_at":"2015-10-16T11:15:25.000Z","updated_at":"2016-12-08T08:35:00.000Z","kind":"code","preview":"Use NumPy to find the dot and cross products of arrays.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Dot and Cross","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":8279,"solved_count":8173,"success_ratio":0.9871965213189999,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13506,"slug":"np-inner-and-outer","name":"Inner and Outer","status":null,"created_at":"2015-10-16T11:16:56.000Z","updated_at":"2016-12-08T08:35:00.000Z","kind":"code","preview":"Use NumPy to find the inner and outer product of arrays.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Inner and Outer","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":7521,"solved_count":7459,"success_ratio":0.9917564153702965,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13507,"slug":"np-polynomials","name":"Polynomials","status":null,"created_at":"2015-10-16T11:17:57.000Z","updated_at":"2016-12-08T08:35:01.000Z","kind":"code","preview":"Given the coefficients, use polynomials in NumPy.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Polynomials","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":7856,"solved_count":7528,"success_ratio":0.9582484725050916,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":139,"name":"Numpy","slug":"numpy","track_id":12,"track_name":"Python","track_slug":"python"},"id":13508,"slug":"np-linear-algebra","name":"Linear Algebra","status":null,"created_at":"2015-10-16T11:18:52.000Z","updated_at":"2016-12-08T08:35:02.000Z","kind":"code","preview":"NumPy routines for linear algebra calculations.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","numpy","Statistics","Core CS","Language-Specific"]}],"first_unsolved_challenge":null,"total":90,"tutorial_signed_up":true,"current_track":{"id":12,"name":"Python","slug":"python","priority":8,"descriptions":"A step by step guide to Python, a language that is easy to pick up yet one of the most powerful.","rewards_system_enabled":null},"promo":{"meta":null,"type":"other"}}