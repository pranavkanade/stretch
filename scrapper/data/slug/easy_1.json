{"models":[{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":5,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":5,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"**Objective**\t\t\nThis is a simple challenge to help you practice creating variables and printing to [stdout](https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29). You may also want to complete [Solve Me First](https://www.hackerrank.com/challenges/solve-me-first) in Python before attempting this challenge.   \n\n----\n\n[Python](https://www.python.org) is an [interpreted](https://en.wikipedia.org/wiki/Interpreter_(computing)), [dynamic programming language](https://en.wikipedia.org/wiki/Dynamic_programming_language) that allows us to execute statements individually and see their results. In other words, you don't have to write and compile an entire program to see the results of your code like you would in some other languages like *C++* and *Java*. \n\n**Note:** You may also want to check out this [Python Style Guide](https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles) for guidance on variable naming.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003e\u003cstrong\u003eObjective\u003c/strong\u003e \u003cbr\u003e\nThis is a simple challenge to help you practice creating variables and printing to \u003ca href=\"https://en.wikipedia.org/wiki/Standard_streams#Standard_output_.28stdout.29\"\u003estdout\u003c/a\u003e. You may also want to complete \u003ca href=\"https://www.hackerrank.com/challenges/solve-me-first\"\u003eSolve Me First\u003c/a\u003e in Python before attempting this challenge.   \u003c/p\u003e\n\n\u003chr\u003e\n\n\u003cp\u003e\u003ca href=\"https://www.python.org\"\u003ePython\u003c/a\u003e is an \u003ca href=\"https://en.wikipedia.org/wiki/Interpreter_%28computing%29\"\u003einterpreted\u003c/a\u003e, \u003ca href=\"https://en.wikipedia.org/wiki/Dynamic_programming_language\"\u003edynamic programming language\u003c/a\u003e that allows us to execute statements individually and see their results. In other words, you don't have to write and compile an entire program to see the results of your code like you would in some other languages like \u003cem\u003eC++\u003c/em\u003e and \u003cem\u003eJava\u003c/em\u003e. \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eNote:\u003c/strong\u003e You may also want to check out this \u003ca href=\"https://www.python.org/dev/peps/pep-0008/#descriptive-naming-styles\"\u003ePython Style Guide\u003c/a\u003e for guidance on variable naming.\u003c/p\u003e","sidebar":""}],"total_count":336820,"solved_count":327796,"success_ratio":0.9732082417908675,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":7876,"slug":"py-hello-world","name":"Say \"Hello, World!\" With Python","status":null,"created_at":"2015-04-20T07:12:12.000Z","updated_at":"2018-06-28T13:05:37.000Z","kind":"code","preview":"Get started with Python by printing to stdout.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"In this challenge, we test your knowledge of using *if-else* conditional statements to automate decision-making processes. An if-else statement has the following logical flow:\n\n![Wikipedia if-else flow chart](https://s3.amazonaws.com/hr-challenge-images/13689/1446563087-4ec019a919-332px-If-Then-Else-diagram.svg.png)\n\n\u003csub\u003eSource: [Wikipedia](https://en.wikipedia.org/wiki/Conditional_(computer_programming))\u003c/sub\u003e","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eIn this challenge, we test your knowledge of using \u003cem\u003eif-else\u003c/em\u003e conditional statements to automate decision-making processes. An if-else statement has the following logical flow:\u003c/p\u003e\n\n\u003cp\u003e\u003cimg src=\"https://s3.amazonaws.com/hr-challenge-images/13689/1446563087-4ec019a919-332px-If-Then-Else-diagram.svg.png\" alt=\"Wikipedia if-else flow chart\" title=\"\"\u003e\u003c/p\u003e\n\n\u003cp\u003e\u003csub\u003eSource: \u003ca href=\"https://en.wikipedia.org/wiki/Conditional_%28computer_programming%29\"\u003eWikipedia\u003c/a\u003e\u003c/sub\u003e\u003c/p\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/py-if-else/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":207066,"solved_count":188928,"success_ratio":0.9124047405175162,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":22447,"slug":"py-if-else","name":"Python If-Else","status":null,"created_at":"2016-06-24T04:49:03.000Z","updated_at":"2018-07-02T07:21:08.000Z","kind":"code","preview":"Practice using if-else conditional statements!","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Easy","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"Let's learn about Python's arithmetic operators.  \n\nFirst, let's read two integers:  \n\n```python\n#Python 2\na = int(raw_input())\nb = int(raw_input())\n\n#Python 3\na = int(input())\nb = int(input())\n```\n\nThe three basic arithmetic operators are the following:  \n\n+ Addition (+)\n+ Subtraction (-)\n+ Multiplication (*)\n \n(We'll learn about division in the next task.)","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eLet's learn about Python's arithmetic operators.  \u003c/p\u003e\n\n\u003cp\u003eFirst, let's read two integers:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"c\"\u003e#Python 2\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003eraw_input\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\n\u003cspan class=\"c\"\u003e#Python 3\u003c/span\u003e\n\u003cspan class=\"n\"\u003ea\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003eint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"nb\"\u003einput\u003c/span\u003e\u003cspan class=\"p\"\u003e())\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eThe three basic arithmetic operators are the following:  \u003c/p\u003e\n\n\u003cul\u003e\n\u003cli\u003eAddition (+)\u003c/li\u003e\n\u003cli\u003eSubtraction (-)\u003c/li\u003e\n\u003cli\u003eMultiplication (*)\u003c/li\u003e\n\u003c/ul\u003e\n\n\u003cp\u003e(We'll learn about division in the next task.)\u003c/p\u003e","sidebar":""}],"total_count":221607,"solved_count":218921,"success_ratio":0.9878794442413823,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":7883,"slug":"python-arithmetic-operators","name":"Arithmetic Operators","status":null,"created_at":"2015-04-20T08:56:01.000Z","updated_at":"2018-02-06T06:37:45.000Z","kind":"code","preview":"Addition, subtraction and multiplication.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"In Python, there are two kinds of division: integer division and float division.   \n\n**Python 2 syntax**  \n```python\nfrom __future__ import division\n\n# floating point division\nprint 4 / 3\n\n# integer division  \nprint 4 // 3\n```\n\n**Python 3 syntax**  \n```python\nprint(4 / 3)\nprint(4 // 3)\n```  \n\nGives the output  \n\n```raw\n1.3333333333333333 \n1\n```\n\n\u003csub\u003e**Note: The `__` in `__future__` is a double underscore.**\u003c/sub\u003e\n\nDuring the time of Python 2, when you divided one integer by another integer, no matter what, the result would always be an integer.  \n\nFor example: \n\n\t\u003e\u003e\u003e 4/3 \n    1\n    \nIn order to make this a float division, you would need to convert one of the arguments into a float.  \n\nFor example:  \n\n    \u003e\u003e\u003e 4/3.0\n    1.3333333333333333\n    \nSince Python doesn't declare data types in advance, you never know when you want to use integers and when you want to use a float. Since floats lose precision, it's not advised to use them in integral calculations.  \n\nTo solve this problem, future Python modules included a new type of division called integer division given by the operator `//`.  \n\nNow, `/` performs float division, and `//` performs integer division.  \n\nIn **Python 2**, we will import a feature from the module [**\\__future\\__**](https://docs.python.org/2/library/__future__.html#module-__future__) called `division`.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eIn Python, there are two kinds of division: integer division and float division.   \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003ePython 2 syntax\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"kn\"\u003efrom\u003c/span\u003e \u003cspan class=\"nn\"\u003e__future__\u003c/span\u003e \u003cspan class=\"kn\"\u003eimport\u003c/span\u003e \u003cspan class=\"n\"\u003edivision\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# floating point division\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\n\u003cspan class=\"c1\"\u003e# integer division  \u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e//\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003ePython 3 syntax\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e/\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e4\u003c/span\u003e \u003cspan class=\"o\"\u003e//\u003c/span\u003e \u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eGives the output  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"err\"\u003e1.3333333333333333 \u003c/span\u003e\n\u003cspan class=\"err\"\u003e1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003csub\u003e\u003cstrong\u003eNote: The \u003ccode\u003e__\u003c/code\u003e in \u003ccode\u003e__future__\u003c/code\u003e is a double underscore.\u003c/strong\u003e\u003c/sub\u003e\u003c/p\u003e\n\n\u003cp\u003eDuring the time of Python 2, when you divided one integer by another integer, no matter what, the result would always be an integer.  \u003c/p\u003e\n\n\u003cp\u003eFor example: \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; 4/3 \n1\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eIn order to make this a float division, you would need to convert one of the arguments into a float.  \u003c/p\u003e\n\n\u003cp\u003eFor example:  \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; 4/3.0\n1.3333333333333333\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eSince Python doesn't declare data types in advance, you never know when you want to use integers and when you want to use a float. Since floats lose precision, it's not advised to use them in integral calculations.  \u003c/p\u003e\n\n\u003cp\u003eTo solve this problem, future Python modules included a new type of division called integer division given by the operator \u003ccode\u003e//\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cp\u003eNow, \u003ccode\u003e/\u003c/code\u003e performs float division, and \u003ccode\u003e//\u003c/code\u003e performs integer division.  \u003c/p\u003e\n\n\u003cp\u003eIn \u003cstrong\u003ePython 2\u003c/strong\u003e, we will import a feature from the module \u003ca href=\"https://docs.python.org/2/library/__future__.html#module-__future__\"\u003e\u003cstrong\u003e__future__\u003c/strong\u003e\u003c/a\u003e called \u003ccode\u003edivision\u003c/code\u003e.\u003c/p\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/python-division/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":214472,"solved_count":211685,"success_ratio":0.9870052967287105,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":7884,"slug":"python-division","name":"Python: Division","status":null,"created_at":"2015-04-20T09:39:01.000Z","updated_at":"2018-02-06T10:23:53.000Z","kind":"code","preview":"Division using __future__ module.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"Loops are control structures that iterate over a range to perform a certain task.  \n\nThere are two kinds of loops in Python.  \n\nA *for* loop:   \n\n```python\nfor i in range(0, 5):\n    print i\n```\n\nAnd a *while* loop: \n\n```python\ni = 0\nwhile i \u003c 5:\n    print i\n    i += 1\n```\n\n**Note** Be careful about indentation in Python. [Read more](https://www.python.org/dev/peps/pep-0008/#indentation)  \n\nHere, the term `range(0,5)` returns a list of integers from $0$ to $5$: $[0, 1, 2, 3, 4]$.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eLoops are control structures that iterate over a range to perform a certain task.  \u003c/p\u003e\n\n\u003cp\u003eThere are two kinds of loops in Python.  \u003c/p\u003e\n\n\u003cp\u003eA \u003cem\u003efor\u003c/em\u003e loop:   \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003erange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eAnd a \u003cem\u003ewhile\u003c/em\u003e loop: \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e0\u003c/span\u003e\n\u003cspan class=\"k\"\u003ewhile\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e\u0026lt;\u003c/span\u003e \u003cspan class=\"mi\"\u003e5\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\n    \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"o\"\u003e+=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e Be careful about indentation in Python. \u003ca href=\"https://www.python.org/dev/peps/pep-0008/#indentation\"\u003eRead more\u003c/a\u003e  \u003c/p\u003e\n\n\u003cp\u003eHere, the term \u003ccode\u003erange(0,5)\u003c/code\u003e returns a list of integers from \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e to \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M164 157Q164 133 148 117T109 101H102Q148 22 224 22Q294 22 326 82Q345 115 345 210Q345 313 318 349Q292 382 260 382H254Q176 382 136 314Q132 307 129 306T114 304Q97 304 95 310Q93 314 93 485V614Q93 664 98 664Q100 666 102 666Q103 666 123 658T178 642T253 634Q324 634 389 662Q397 666 402 666Q410 666 410 648V635Q328 538 205 538Q174 538 149 544L139 546V374Q158 388 169 396T205 412T256 420Q337 420 393 355T449 201Q449 109 385 44T229 -22Q148 -22 99 32T50 154Q50 178 61 192T84 210T107 214Q132 214 148 197T164 157Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e: \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"11.242ex\" height=\"2.843ex\" style=\"vertical-align: -0.838ex;\" viewBox=\"0 -863.1 4840.2 1223.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M118 -250V750H255V710H158V-210H255V-250H118Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(278,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M96 585Q152 666 249 666Q297 666 345 640T423 548Q460 465 460 320Q460 165 417 83Q397 41 362 16T301 -15T250 -22Q224 -22 198 -16T137 16T82 83Q39 165 39 320Q39 494 96 585ZM321 597Q291 629 250 629Q208 629 178 597Q153 571 145 525T137 333Q137 175 145 125T181 46Q209 16 250 16Q290 16 318 46Q347 76 354 130T362 333Q362 478 354 524T321 597Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(779,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1224,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1724,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2169,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(2670,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3115,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M127 463Q100 463 85 480T69 524Q69 579 117 622T233 665Q268 665 277 664Q351 652 390 611T430 522Q430 470 396 421T302 350L299 348Q299 347 308 345T337 336T375 315Q457 262 457 175Q457 96 395 37T238 -22Q158 -22 100 21T42 130Q42 158 60 175T105 193Q133 193 151 175T169 130Q169 119 166 110T159 94T148 82T136 74T126 70T118 67L114 66Q165 21 238 21Q293 21 321 74Q338 107 338 175V195Q338 290 274 322Q259 328 213 329L171 330L168 332Q166 335 166 348Q166 366 174 366Q202 366 232 371Q266 376 294 413T322 525V533Q322 590 287 612Q265 626 240 626Q208 626 181 615T143 592T132 580H135Q138 579 143 578T153 573T165 566T175 555T183 540T186 520Q186 498 172 481T127 463Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(3616,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4061,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M462 0Q444 3 333 3Q217 3 199 0H190V46H221Q241 46 248 46T265 48T279 53T286 61Q287 63 287 115V165H28V211L179 442Q332 674 334 675Q336 677 355 677H373L379 671V211H471V165H379V114Q379 73 379 66T385 54Q393 47 442 46H471V0H462ZM293 211V545L74 212L183 211H293Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(4561,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M22 710V750H159V-250H22V-210H119V710H22Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.\u003c/p\u003e","sidebar":""}],"total_count":201369,"solved_count":198178,"success_ratio":0.9841534695012638,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":7941,"slug":"python-loops","name":"Loops","status":null,"created_at":"2015-04-21T06:44:27.000Z","updated_at":"2018-02-06T10:45:47.000Z","kind":"code","preview":"Practice using \"for\" and \"while\" loops in Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"In Python 2, the default print is a simple IO method that doesn't give many options to play around with.   \n\nThe following two examples will summarize it.   \n\n**Example 1:**  \n\n```python\nvar, var1, var2 = 1,2,3\nprint var\nprint var1, var2 \n```\n\nPrints two lines and, in the second line, $var1$ and $var2$ are separated by a single space.  \n\n**Example 2:**  \n\n```python\nfor i in xrange(10):\n    print i,\n```\n        \nPrints each element separated by space on a single line. Removing the comma at the end will print each element on a new line.    \n\nLet's import the advanced `print_function` from the `__future__` module.  \n\nIts method signature is below:   \n\n```python\nprint(*values, sep=' ', end='\\n', file=sys.stdout)\nprint(value1, value2, value3, sep=' ', end='\\n', file=sys.stdout)\n```\n    \nHere, values is an array and *values means array is unpacked, you can add values separated by a comma too. The arguments *sep*, *end*, and *file* are optional, but they can prove helpful in formatting output without taking help from a string module.  \n\nThe argument definitions are below:  \n`sep` defines the delimiter between the values.  \n`end` defines what to print after the values.  \n`file` defines the output stream.  \n\nin Python 2 `print_function` is much faster than the default `print`","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eIn Python 2, the default print is a simple IO method that doesn't give many options to play around with.   \u003c/p\u003e\n\n\u003cp\u003eThe following two examples will summarize it.   \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample 1:\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003evar\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evar1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evar2\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003evar\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003evar1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evar2\u003c/span\u003e \n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003ePrints two lines and, in the second line, \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.569ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1967 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(485,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1015,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1466,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M213 578L200 573Q186 568 160 563T102 556H83V602H102Q149 604 189 617T245 641T273 663Q275 666 285 666Q294 666 302 660V361L303 61Q310 54 315 52T339 48T401 46H427V0H416Q395 3 257 3Q121 3 100 0H88V46H114Q136 46 152 46T177 47T193 50T201 52T207 57T213 61V578Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e and \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"4.569ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 1967 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M173 380Q173 405 154 405Q130 405 104 376T61 287Q60 286 59 284T58 281T56 279T53 278T49 278T41 278H27Q21 284 21 287Q21 294 29 316T53 368T97 419T160 441Q202 441 225 417T249 361Q249 344 246 335Q246 329 231 291T200 202T182 113Q182 86 187 69Q200 26 250 26Q287 26 319 60T369 139T398 222T409 277Q409 300 401 317T383 343T365 361T357 383Q357 405 376 424T417 443Q436 443 451 425T467 367Q467 340 455 284T418 159T347 40T241 -11Q177 -11 139 22Q102 54 102 117Q102 148 110 181T151 298Q173 362 173 380Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(485,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1015,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M21 287Q22 290 23 295T28 317T38 348T53 381T73 411T99 433T132 442Q161 442 183 430T214 408T225 388Q227 382 228 382T236 389Q284 441 347 441H350Q398 441 422 400Q430 381 430 363Q430 333 417 315T391 292T366 288Q346 288 334 299T322 328Q322 376 378 392Q356 405 342 405Q286 405 239 331Q229 315 224 298T190 165Q156 25 151 16Q138 -11 108 -11Q95 -11 87 -5T76 7T74 17Q74 30 114 189T154 366Q154 405 128 405Q107 405 92 377T68 316T57 280Q55 278 41 278H27Q21 284 21 287Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(1466,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e are separated by a single space.  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003eExample 2:\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003efor\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"nb\"\u003exrange\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e):\u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ei\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003ePrints each element separated by space on a single line. Removing the comma at the end will print each element on a new line.    \u003c/p\u003e\n\n\u003cp\u003eLet's import the advanced \u003ccode\u003eprint_function\u003c/code\u003e from the \u003ccode\u003e__future__\u003c/code\u003e module.  \u003c/p\u003e\n\n\u003cp\u003eIts method signature is below:   \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"o\"\u003e*\u003c/span\u003e\u003cspan class=\"n\"\u003evalues\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esep\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003evalue1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003evalue3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003esep\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e' '\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eend\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"se\"\u003e\\n\u003c/span\u003e\u003cspan class=\"s1\"\u003e'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"nb\"\u003efile\u003c/span\u003e\u003cspan class=\"o\"\u003e=\u003c/span\u003e\u003cspan class=\"n\"\u003esys\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003estdout\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eHere, values is an array and *values means array is unpacked, you can add values separated by a comma too. The arguments \u003cem\u003esep\u003c/em\u003e, \u003cem\u003eend\u003c/em\u003e, and \u003cem\u003efile\u003c/em\u003e are optional, but they can prove helpful in formatting output without taking help from a string module.  \u003c/p\u003e\n\n\u003cp\u003eThe argument definitions are below: \u003cbr\u003e\n\u003ccode\u003esep\u003c/code\u003e defines the delimiter between the values. \u003cbr\u003e\n\u003ccode\u003eend\u003c/code\u003e defines what to print after the values. \u003cbr\u003e\n\u003ccode\u003efile\u003c/code\u003e defines the output stream.  \u003c/p\u003e\n\n\u003cp\u003ein Python 2 \u003ccode\u003eprint_function\u003c/code\u003e is much faster than the default \u003ccode\u003eprint\u003c/code\u003e\u003c/p\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/python-print/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":160333,"solved_count":153661,"success_ratio":0.9583866078723656,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":8026,"slug":"python-print","name":"Print Function","status":null,"created_at":"2015-04-27T05:04:21.000Z","updated_at":"2018-02-07T06:33:00.000Z","kind":"code","preview":"Learn to use print as a function ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"**Concept**\n\nYou have already used lists in previous hacks. List comprehensions are an elegant way to build a list without having to use different *for* loops to append values one by one. [These examples](http://www.thelearningpoint.net/computer-science/learning-python-programming-and-data-structures/learning-python-programming-and-data-structures--tutorial-15--generators-and-list-comprehensions) might help.  \n\nThe simplest form of a list comprehension is: \n\u003cbr\u003e\u003cbr\u003e\n__[ expression-involving-loop-variable for loop-variable in sequence ]__\n\u003cbr\u003e\u003cbr\u003e\nThis will step over every element in a sequence, successively setting the loop-variable equal to every element one at a time. It will then build up a list by evaluating the expression-involving-loop-variable for each one. This eliminates the need to use lambda forms and generally produces a much more readable code than using *map()* and a more compact code than using a *for* loop.  \n\n\n    \u003e\u003e ListOfNumbers = [ x for x in range(10) ] # List of integers from 0 to 9\n    \u003e\u003e ListOfNumbers\n    [0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\n\nList comprehensions can be nested where they take the following form:\n\u003cbr\u003e\u003cbr\u003e\n__[ expression-involving-loop-variables for outer-loop-variable in outer-sequence for inner-loop-variable in inner-sequence ]__\n\u003cbr\u003e\n\nThis is equivalent to writing: \n\u003cbr\u003e\n\u003cpre\u003e\nresults = []\nfor outer_loop_variable in outer_sequence:\n    for inner_loop_variable in inner_sequence:\n        results.append( expression_involving_loop_variables )\n\u003c/pre\u003e\n\u003cbr\u003e\nThe final form of list comprehension involves creating a list and filtering it similar to using the *filter()* method. The filtering form of list comprehension takes the following form:\n\u003cbr\u003e\u003cbr\u003e\n__[ expression-involving-loop-variable for loop-variable in sequence if boolean-expression-involving-loop-variable ]__\n\u003cbr\u003e\u003cbr\u003e\nThis form is similar to the simple form of list comprehension, but it evaluates boolean-expression-involving-loop-variable for every item. It also only keeps those members for which the boolean expression is *True*.\n\n    \u003e\u003e ListOfThreeMultiples = [x for x in range(10) if x % 3 == 0] # Multiples of 3 below 10\n    \u003e\u003e ListOfThreeMultiples\n    [0, 3, 6, 9]","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003e\u003cstrong\u003eConcept\u003c/strong\u003e\u003c/p\u003e\n\n\u003cp\u003eYou have already used lists in previous hacks. List comprehensions are an elegant way to build a list without having to use different \u003cem\u003efor\u003c/em\u003e loops to append values one by one. \u003ca href=\"http://www.thelearningpoint.net/computer-science/learning-python-programming-and-data-structures/learning-python-programming-and-data-structures--tutorial-15--generators-and-list-comprehensions\"\u003eThese examples\u003c/a\u003e might help.  \u003c/p\u003e\n\n\u003cp\u003eThe simplest form of a list comprehension is: \n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003e[ expression-involving-loop-variable for loop-variable in sequence ]\u003c/strong\u003e\n\u003cbr\u003e\u003cbr\u003e\nThis will step over every element in a sequence, successively setting the loop-variable equal to every element one at a time. It will then build up a list by evaluating the expression-involving-loop-variable for each one. This eliminates the need to use lambda forms and generally produces a much more readable code than using \u003cem\u003emap()\u003c/em\u003e and a more compact code than using a \u003cem\u003efor\u003c/em\u003e loop.  \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt; ListOfNumbers = [ x for x in range(10) ] # List of integers from 0 to 9\n\u0026gt;\u0026gt; ListOfNumbers\n[0, 1, 2, 3, 4, 5, 6, 7, 8, 9]\n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003eList comprehensions can be nested where they take the following form:\n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003e[ expression-involving-loop-variables for outer-loop-variable in outer-sequence for inner-loop-variable in inner-sequence ]\u003c/strong\u003e\n\u003cbr\u003e\u003c/p\u003e\n\n\u003cp\u003eThis is equivalent to writing: \n\u003cbr\u003e\u003c/p\u003e\n\n\u003cpre\u003eresults = []\nfor outer_loop_variable in outer_sequence:\n    for inner_loop_variable in inner_sequence:\n        results.append( expression_involving_loop_variables )\n\u003c/pre\u003e\n\n\u003cp\u003e\u003cbr\u003e\nThe final form of list comprehension involves creating a list and filtering it similar to using the \u003cem\u003efilter()\u003c/em\u003e method. The filtering form of list comprehension takes the following form:\n\u003cbr\u003e\u003cbr\u003e\n\u003cstrong\u003e[ expression-involving-loop-variable for loop-variable in sequence if boolean-expression-involving-loop-variable ]\u003c/strong\u003e\n\u003cbr\u003e\u003cbr\u003e\nThis form is similar to the simple form of list comprehension, but it evaluates boolean-expression-involving-loop-variable for every item. It also only keeps those members for which the boolean expression is \u003cem\u003eTrue\u003c/em\u003e.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt; ListOfThreeMultiples = [x for x in range(10) if x % 3 == 0] # Multiples of 3 below 10\n\u0026gt;\u0026gt; ListOfThreeMultiples\n[0, 3, 6, 9]\n\u003c/code\u003e\u003c/pre\u003e","sidebar":""}],"total_count":75668,"solved_count":74773,"success_ratio":0.9881720145900513,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":1572,"slug":"list-comprehensions","name":"List Comprehensions","status":null,"created_at":"2013-12-19T18:18:16.000Z","updated_at":"2018-02-07T06:50:23.000Z","kind":"code","preview":"You will learn about list comprehensions.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9613333333333334,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":83052,"solved_count":78550,"success_ratio":0.9457929971584068,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":1374,"slug":"find-second-maximum-number-in-a-list","name":"Find the Runner-Up Score!  ","status":null,"created_at":"2013-11-28T08:10:58.000Z","updated_at":"2017-12-29T04:56:57.000Z","kind":"code","preview":"For a given list of numbers, find the second largest number.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.900355871886121,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"Let's implement a *nested list*! A nested list is a list that contains another list (i.e.: a list of lists). For example:  \n\n```python\nnested_list = [['blue', 'green'], ['red', 'black'], ['blue', 'white']]\nprint len(nested_list)\n# prints 3\nprint nested_list[1]\n# prints ['red', 'black']\nprint nested_list[1][0]\n# prints red\n```\n  \nTo go through every element in a list, use a nested *for* loop.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eLet's implement a \u003cem\u003enested list\u003c/em\u003e! A nested list is a list that contains another list (i.e.: a list of lists). For example:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan\u003e\u003c/span\u003e\u003cspan class=\"n\"\u003enested_list\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'blue'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'green'\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'red'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'black'\u003c/span\u003e\u003cspan class=\"p\"\u003e],\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s1\"\u003e'blue'\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"s1\"\u003e'white'\u003c/span\u003e\u003cspan class=\"p\"\u003e]]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"nb\"\u003elen\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"n\"\u003enested_list\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# prints 3\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003enested_list\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# prints ['red', 'black']\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003enested_list\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e][\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c1\"\u003e# prints red\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eTo go through every element in a list, use a nested \u003cem\u003efor\u003c/em\u003e loop.\u003c/p\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/nested-list/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":59115,"solved_count":53342,"success_ratio":0.9023428909752178,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":1375,"slug":"nested-list","name":"Nested Lists","status":null,"created_at":"2013-11-28T08:12:25.000Z","updated_at":"2018-02-07T07:08:12.000Z","kind":"code","preview":"In a classroom of N students, find the student with the second lowest grade.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.816017316017316,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"A dictionary is a data type which stores values in pairs. For each element in the dictionary, there is a unique key that points to a value. A dictionary is mutable. It can be changed.  \nFor example:  \n\n```python\na_dict = {'one': 1} # Here 'one' is the key.  \n```  \n\n**Note**: The key of a dictionary is immutable. We cannot use a *list* as a key because a *list* is mutable. But we can make a tuple of list and use as key.  \n\n```python\na_dict['two'] = 2 # Adds key 'two' which points to 2\nprint a_dict['one']\n# prints 1  \nif 'three' in a_dict:\n    # To check whether a certain string exist as a key in the dictionary  \n    print a_dict['three']\nelse:  \n    print \"Three not there\"\n# prints Three not there\ndel a_dict['one']\n# Deletes index 'one' and the value associated with it  \nprint a_dict\n# prints {'two': 2}\n```\n    \n**Note**: A dictionary is unordered. So, only use the keys to navigate through the dictionary.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eA dictionary is a data type which stores values in pairs. For each element in the dictionary, there is a unique key that points to a value. A dictionary is mutable. It can be changed. \u003cbr\u003e\nFor example:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e{\u003c/span\u003e\u003cspan class=\"s\"\u003e'one'\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e \u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e}\u003c/span\u003e \u003cspan class=\"c\"\u003e# Here 'one' is the key.  \u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: The key of a dictionary is immutable. We cannot use a \u003cem\u003elist\u003c/em\u003e as a key because a \u003cem\u003elist\u003c/em\u003e is mutable. But we can make a tuple of list and use as key.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'two'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"mi\"\u003e2\u003c/span\u003e \u003cspan class=\"c\"\u003e# Adds key 'two' which points to 2\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'one'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints 1  \u003c/span\u003e\n\u003cspan class=\"k\"\u003eif\u003c/span\u003e \u003cspan class=\"s\"\u003e'three'\u003c/span\u003e \u003cspan class=\"ow\"\u003ein\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e\n    \u003cspan class=\"c\"\u003e# To check whether a certain string exist as a key in the dictionary  \u003c/span\u003e\n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'three'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"k\"\u003eelse\u003c/span\u003e\u003cspan class=\"p\"\u003e:\u003c/span\u003e  \n    \u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"s\"\u003e\"Three not there\"\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints Three not there\u003c/span\u003e\n\u003cspan class=\"k\"\u003edel\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"s\"\u003e'one'\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# Deletes index 'one' and the value associated with it  \u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003ea_dict\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints {'two': 2}\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003eNote\u003c/strong\u003e: A dictionary is unordered. So, only use the keys to navigate through the dictionary.\u003c/p\u003e","sidebar":""}],"total_count":67486,"solved_count":65498,"success_ratio":0.9705420383486946,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":1377,"slug":"finding-the-percentage","name":"Finding the percentage","status":null,"created_at":"2013-11-28T08:15:41.000Z","updated_at":"2018-02-07T06:48:55.000Z","kind":"code","preview":"Store a list of students and marks in a dictionary, and find the average marks obtained by a student.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9511834319526628,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"When we talk about storing multiple values in a container-like data structure, the first thing that comes to mind is a _list_.  \n\nYou can initialize a list as:  \n\n```python\narr = list()\n# or simply\narr = []\n```\n    \nor with a few elements as: \n\n```python\narr = [1,2,3]\n```\n\nElements can be accessed easily similar to most programming languages: \n\n```python\nprint arr[0]\n# result is 1\nprint arr[0] + arr[1] + arr[2]\n# result is 6\n```\n\nLists in Python are very versatile. You can add almost anything in a Python list.\n\nIn Python, you can create a list of any objects: strings, integers, or even lists. You can even add multiple types in a single list! \n\nLet's look at some of the methods you can use on list.  \n\n**1.) append(x)**  \n\nAdds a single element `x` to the end of a list.  \n\n```python\narr.append(9)   \nprint arr  \n# prints [1, 2, 3, 9]\n```\n\n**2.) extend(L)**  \n\nMerges another list `L` to the end.  \n\n```python\narr.extend([10,11])\nprint arr\n# prints [1, 2, 3, 9, 10, 11]\n```\n\n**3.) insert(i,x)**  \nInserts element `x` at position `i`.  \n\t\n```python\narr.insert(3,7)\nprint arr\n# prints [1, 2, 3, 7, 9, 10, 11]\n```\n\n**4.) remove(x)**  \nRemoves the first occurrence of element `x`.  \n\n```python  \narr.remove(10)  \narr  \n# prints [1, 2, 3, 7, 9, 11]\n```\n    \n**5.) pop()**  \nRemoves the last element of a list. If an argument is passed, that index item is popped out.   \n\n```python\ntemp = arr.pop()\nprint temp \n# prints 11\n```\n    \n**6.) index(x)**  \nReturns the first index of a value in the list. Throws an error if it's not found.  \n\n```python\ntemp = arr.index(3)\nprint temp\n# prints 2\n```\n    \n**7.) count(x)**  \nCounts the number of occurrences of an element `x`.  \n\n```python\ntemp = arr.count(1)\nprint temp\n# prints 1\n```\n\n**8.) sort()**  \nSorts the list.  \n\n```python\narr.sort()\nprint arr\n# [1, 2, 3, 7, 9]\n```\n\n**9.) reverse()**  \nReverses the list.  \n\n```python\narr.reverse()\nprint arr\n# [9, 7, 3, 2, 1]\n```","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003eWhen we talk about storing multiple values in a container-like data structure, the first thing that comes to mind is a \u003cem\u003elist\u003c/em\u003e.  \u003c/p\u003e\n\n\u003cp\u003eYou can initialize a list as:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"nb\"\u003elist\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# or simply\u003c/span\u003e\n\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eor with a few elements as: \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eElements can be accessed easily similar to most programming languages: \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# result is 1\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e0\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e \u003cspan class=\"o\"\u003e+\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"p\"\u003e[\u003c/span\u003e\u003cspan class=\"mi\"\u003e2\u003c/span\u003e\u003cspan class=\"p\"\u003e]\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# result is 6\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eLists in Python are very versatile. You can add almost anything in a Python list.\u003c/p\u003e\n\n\u003cp\u003eIn Python, you can create a list of any objects: strings, integers, or even lists. You can even add multiple types in a single list! \u003c/p\u003e\n\n\u003cp\u003eLet's look at some of the methods you can use on list.  \u003c/p\u003e\n\n\u003cp\u003e\u003cstrong\u003e1.) append(x)\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003eAdds a single element \u003ccode\u003ex\u003c/code\u003e to the end of a list.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eappend\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e9\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e   \n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e  \n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 9]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e2.) extend(L)\u003c/strong\u003e  \u003c/p\u003e\n\n\u003cp\u003eMerges another list \u003ccode\u003eL\u003c/code\u003e to the end.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eextend\u003c/span\u003e\u003cspan class=\"p\"\u003e([\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e11\u003c/span\u003e\u003cspan class=\"p\"\u003e])\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 9, 10, 11]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e3.) insert(i,x)\u003c/strong\u003e \u003cbr\u003e\nInserts element \u003ccode\u003ex\u003c/code\u003e at position \u003ccode\u003ei\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003einsert\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e\u003cspan class=\"mi\"\u003e7\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 7, 9, 10, 11]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e4.) remove(x)\u003c/strong\u003e \u003cbr\u003e\nRemoves the first occurrence of element \u003ccode\u003ex\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eremove\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e10\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e  \n\u003cspan class=\"n\"\u003earr\u003c/span\u003e  \n\u003cspan class=\"c\"\u003e# prints [1, 2, 3, 7, 9, 11]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e5.) pop()\u003c/strong\u003e \u003cbr\u003e\nRemoves the last element of a list. If an argument is passed, that index item is popped out.   \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003epop\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e \n\u003cspan class=\"c\"\u003e# prints 11\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e6.) index(x)\u003c/strong\u003e \u003cbr\u003e\nReturns the first index of a value in the list. Throws an error if it's not found.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003eindex\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e3\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints 2\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e7.) count(x)\u003c/strong\u003e \u003cbr\u003e\nCounts the number of occurrences of an element \u003ccode\u003ex\u003c/code\u003e.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003etemp\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ecount\u003c/span\u003e\u003cspan class=\"p\"\u003e(\u003c/span\u003e\u003cspan class=\"mi\"\u003e1\u003c/span\u003e\u003cspan class=\"p\"\u003e)\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003etemp\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# prints 1\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e8.) sort()\u003c/strong\u003e \u003cbr\u003e\nSorts the list.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003esort\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# [1, 2, 3, 7, 9]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003e\u003cstrong\u003e9.) reverse()\u003c/strong\u003e \u003cbr\u003e\nReverses the list.  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003earr\u003c/span\u003e\u003cspan class=\"o\"\u003e.\u003c/span\u003e\u003cspan class=\"n\"\u003ereverse\u003c/span\u003e\u003cspan class=\"p\"\u003e()\u003c/span\u003e\n\u003cspan class=\"k\"\u003eprint\u003c/span\u003e \u003cspan class=\"n\"\u003earr\u003c/span\u003e\n\u003cspan class=\"c\"\u003e# [9, 7, 3, 2, 1]\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n","sidebar":""}],"total_count":81606,"solved_count":72768,"success_ratio":0.8916991397691346,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":7888,"slug":"python-lists","name":"Lists","status":null,"created_at":"2015-04-20T10:33:57.000Z","updated_at":"2018-02-07T06:43:38.000Z","kind":"code","preview":"Perform different list operations.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"[Tuples](https://docs.python.org/3/library/stdtypes.html?#tuple) are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities.  \n\nA common tuple use is the swapping of $2$ numbers:  \n\n```python\na, b = b, a\n```\n    \nHere $a, b$ is a tuple, and it assigns itself the values of $b, a$.   \n\nAnother awesome use of tuples is as keys in a dictionary. In other words, tuples are hashable.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003cp\u003e\u003ca href=\"https://docs.python.org/3/library/stdtypes.html?#tuple\"\u003eTuples\u003c/a\u003e are data structures that look a lot like lists. Unlike lists, tuples are immutable (meaning that they cannot be modified once created). This restricts their use because we cannot add, remove, or assign values; however, it gives us an advantage in space and time complexities.  \u003c/p\u003e\n\n\u003cp\u003eA common tuple use is the swapping of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-1-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"1.162ex\" height=\"2.176ex\" style=\"vertical-align: -0.338ex;\" viewBox=\"0 -791.3 500.5 936.9\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M109 429Q82 429 66 447T50 491Q50 562 103 614T235 666Q326 666 387 610T449 465Q449 422 429 383T381 315T301 241Q265 210 201 149L142 93L218 92Q375 92 385 97Q392 99 409 186V189H449V186Q448 183 436 95T421 3V0H50V19V31Q50 38 56 46T86 81Q115 113 136 137Q145 147 170 174T204 211T233 244T261 278T284 308T305 340T320 369T333 401T340 431T343 464Q343 527 309 573T212 619Q179 619 154 602T119 569T109 550Q109 549 114 549Q132 549 151 535T170 489Q170 464 154 447T109 429Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e numbers:  \u003c/p\u003e\n\n\u003cdiv class=\"highlight\"\u003e\u003cpre\u003e\u003cspan class=\"n\"\u003ea\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e \u003cspan class=\"o\"\u003e=\u003c/span\u003e \u003cspan class=\"n\"\u003eb\u003c/span\u003e\u003cspan class=\"p\"\u003e,\u003c/span\u003e \u003cspan class=\"n\"\u003ea\u003c/span\u003e\n\u003c/pre\u003e\u003c/div\u003e\n\n\n\u003cp\u003eHere \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-2-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.261ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 1404.2 1080.4\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(529,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(974,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e is a tuple, and it assigns itself the values of \u003cspan style=\"font-size: 100%; display: inline-block;\" class=\"MathJax_SVG\" id=\"MathJax-Element-3-Frame\"\u003e\u003csvg xmlns:xlink=\"http://www.w3.org/1999/xlink\" width=\"3.261ex\" height=\"2.509ex\" style=\"vertical-align: -0.671ex;\" viewBox=\"0 -791.3 1404.2 1080.4\" role=\"img\" focusable=\"false\"\u003e\u003cg stroke=\"currentColor\" fill=\"currentColor\" stroke-width=\"0\" transform=\"matrix(1 0 0 -1 0 0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M73 647Q73 657 77 670T89 683Q90 683 161 688T234 694Q246 694 246 685T212 542Q204 508 195 472T180 418L176 399Q176 396 182 402Q231 442 283 442Q345 442 383 396T422 280Q422 169 343 79T173 -11Q123 -11 82 27T40 150V159Q40 180 48 217T97 414Q147 611 147 623T109 637Q104 637 101 637H96Q86 637 83 637T76 640T73 647ZM336 325V331Q336 405 275 405Q258 405 240 397T207 376T181 352T163 330L157 322L136 236Q114 150 114 114Q114 66 138 42Q154 26 178 26Q211 26 245 58Q270 81 285 114T318 219Q336 291 336 325Z\"\u003e\u003c/path\u003e\u003cg transform=\"translate(429,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M78 35T78 60T94 103T137 121Q165 121 187 96T210 8Q210 -27 201 -60T180 -117T154 -158T130 -185T117 -194Q113 -194 104 -185T95 -172Q95 -168 106 -156T131 -126T157 -76T173 -3V9L172 8Q170 7 167 6T161 3T152 1T140 0Q113 0 96 17Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003cg transform=\"translate(874,0)\"\u003e\u003cpath stroke-width=\"1\" d=\"M33 157Q33 258 109 349T280 441Q331 441 370 392Q386 422 416 422Q429 422 439 414T449 394Q449 381 412 234T374 68Q374 43 381 35T402 26Q411 27 422 35Q443 55 463 131Q469 151 473 152Q475 153 483 153H487Q506 153 506 144Q506 138 501 117T481 63T449 13Q436 0 417 -8Q409 -10 393 -10Q359 -10 336 5T306 36L300 51Q299 52 296 50Q294 48 292 46Q233 -10 172 -10Q117 -10 75 30T33 157ZM351 328Q351 334 346 350T323 385T277 405Q242 405 210 374T160 293Q131 214 119 129Q119 126 119 118T118 106Q118 61 136 44T179 26Q217 26 254 59T298 110Q300 114 325 217T351 328Z\"\u003e\u003c/path\u003e\u003c/g\u003e\u003c/g\u003e\u003c/svg\u003e\u003c/span\u003e.   \u003c/p\u003e\n\n\u003cp\u003eAnother awesome use of tuples is as keys in a dictionary. In other words, tuples are hashable.\u003c/p\u003e","sidebar":""}],"total_count":75405,"solved_count":73991,"success_ratio":0.9812479278562429,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":74,"name":"Basic Data Types","slug":"py-basic-data-types","track_id":12,"track_name":"Python","track_slug":"python"},"id":7889,"slug":"python-tuples","name":"Tuples ","status":null,"created_at":"2015-04-20T10:37:11.000Z","updated_at":"2018-02-07T06:45:52.000Z","kind":"code","preview":"Learn about tuples and compute hash(T).","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Data Types","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":67948,"solved_count":66909,"success_ratio":0.9847088950373816,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":9870,"slug":"swap-case","name":"sWAP cASE","status":null,"created_at":"2015-08-18T10:48:14.000Z","updated_at":"2018-02-07T07:06:43.000Z","kind":"code","preview":"Swap the letter cases of a given string. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":70183,"solved_count":69310,"success_ratio":0.9875610902925209,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":8057,"slug":"python-string-split-and-join","name":"String Split and Join","status":null,"created_at":"2015-04-28T16:45:52.000Z","updated_at":"2017-01-26T01:54:14.000Z","kind":"code","preview":"Use Python's split and join methods on the input string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":93657,"solved_count":91798,"success_ratio":0.9801509764352905,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":1371,"slug":"whats-your-name","name":"What's Your Name?","status":null,"created_at":"2013-11-28T07:58:23.000Z","updated_at":"2018-02-07T06:44:19.000Z","kind":"code","preview":"Python string practice: Print your name in the console.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9299397920087575,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","Python Tutorials","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":64826,"solved_count":63544,"success_ratio":0.9802239842038688,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":7890,"slug":"python-mutations","name":"Mutations","status":null,"created_at":"2015-04-20T10:43:55.000Z","updated_at":"2016-12-13T10:05:10.000Z","kind":"code","preview":"Understand immutable vs mutable by making changes to a given string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":57841,"solved_count":54367,"success_ratio":0.9399387977386283,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":1373,"slug":"find-a-string","name":"Find a string","status":null,"created_at":"2013-11-28T08:08:59.000Z","updated_at":"2016-12-22T03:17:27.000Z","kind":"code","preview":"Find the number of occurrences of a substring in a string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9328358208955224,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","Python Tutorials","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":48400,"solved_count":45626,"success_ratio":0.9426859504132231,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":11742,"slug":"string-validators","name":"String Validators","status":null,"created_at":"2015-08-27T12:00:28.000Z","updated_at":"2017-04-10T09:13:52.000Z","kind":"code","preview":"Identify the presence of alphanumeric characters, alphabetical characters, digits, lowercase and uppercase characters in a string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist tutorial","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":37667,"solved_count":37087,"success_ratio":0.9846019061778214,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":9953,"slug":"text-alignment","name":"Text Alignment","status":null,"created_at":"2015-08-21T07:22:15.000Z","updated_at":"2016-12-08T08:33:26.000Z","kind":"code","preview":"Generate the Hackerrank logo with alignments in Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist tutorials","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":[{"title":"Tutorial","slug":"tutorial","content_mkd":"###\u003csub\u003e[__Textwrap__](https://docs.python.org/2/library/textwrap.html#module-textwrap)\u003c/sub\u003e\n\nThe *textwrap* module provides two convenient functions: *wrap()* and *fill()*.\n\n[*textwrap.wrap()*](https://docs.python.org/2/library/textwrap.html#textwrap.wrap)  \nThe *wrap()* function wraps a single paragraph in text (a string) so that every line is *width* characters long at most.  \nIt returns a list of output lines.\n \n\t\u003e\u003e\u003e import textwrap\n    \u003e\u003e\u003e string = \"This is a very very very very very long string.\"\n    \u003e\u003e\u003e print textwrap.wrap(string,8)\n\t['This is', 'a very', 'very', 'very', 'very', 'very', 'long', 'string.'] \n\n[*textwrap.fill()*](https://docs.python.org/2/library/textwrap.html#textwrap.fill)  \nThe *fill()* function wraps a single paragraph in text and returns a single string containing the wrapped paragraph. \n\n\t\u003e\u003e\u003e import textwrap\n    \u003e\u003e\u003e string = \"This is a very very very very very long string.\"\n    \u003e\u003e\u003e print textwrap.fill(string,8)\n    This is\n    a very\n    very\n    very\n    very\n    very\n    long\n    string.","sidebar_mkd":null,"content":"\u003cstyle id=\"MathJax_SVG_styles\"\u003e.MathJax_SVG_Display {text-align: center; margin: 1em 0em; position: relative; display: block!important; text-indent: 0; max-width: none; max-height: none; min-width: 0; min-height: 0; width: 100%}\n.MathJax_SVG .MJX-monospace {font-family: monospace}\n.MathJax_SVG .MJX-sans-serif {font-family: sans-serif}\n.MathJax_SVG {display: inline; font-style: normal; font-weight: normal; line-height: normal; font-size: 100%; font-size-adjust: none; text-indent: 0; text-align: left; text-transform: none; letter-spacing: normal; word-spacing: normal; word-wrap: normal; white-space: nowrap; float: none; direction: ltr; max-width: none; max-height: none; min-width: 0; min-height: 0; border: 0; padding: 0; margin: 0}\n.MathJax_SVG * {transition: none; -webkit-transition: none; -moz-transition: none; -ms-transition: none; -o-transition: none}\n.mjx-svg-href {fill: blue; stroke: blue}\n.MathJax_SVG_LineBox {display: table!important}\n.MathJax_SVG_LineBox span {display: table-cell!important; width: 10000em!important; min-width: 0; max-width: none; padding: 0; border: 0; margin: 0}\n\u003c/style\u003e\u003csvg style=\"display: none;\"\u003e\u003cdefs id=\"MathJax_SVG_glyphs\"\u003e\u003c/defs\u003e\u003c/svg\u003e\u003ch3\u003e\u003csub\u003e\u003ca href=\"https://docs.python.org/2/library/textwrap.html#module-textwrap\"\u003e\u003cstrong\u003eTextwrap\u003c/strong\u003e\u003c/a\u003e\u003c/sub\u003e\u003c/h3\u003e\n\n\u003cp\u003eThe \u003cem\u003etextwrap\u003c/em\u003e module provides two convenient functions: \u003cem\u003ewrap()\u003c/em\u003e and \u003cem\u003efill()\u003c/em\u003e.\u003c/p\u003e\n\n\u003cp\u003e\u003ca href=\"https://docs.python.org/2/library/textwrap.html#textwrap.wrap\"\u003e\u003cem\u003etextwrap.wrap()\u003c/em\u003e\u003c/a\u003e \u003cbr\u003e\nThe \u003cem\u003ewrap()\u003c/em\u003e function wraps a single paragraph in text (a string) so that every line is \u003cem\u003ewidth\u003c/em\u003e characters long at most. \u003cbr\u003e\nIt returns a list of output lines.\u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; import textwrap\n\u0026gt;\u0026gt;\u0026gt; string = \"This is a very very very very very long string.\"\n\u0026gt;\u0026gt;\u0026gt; print textwrap.wrap(string,8)\n['This is', 'a very', 'very', 'very', 'very', 'very', 'long', 'string.'] \n\u003c/code\u003e\u003c/pre\u003e\n\n\u003cp\u003e\u003ca href=\"https://docs.python.org/2/library/textwrap.html#textwrap.fill\"\u003e\u003cem\u003etextwrap.fill()\u003c/em\u003e\u003c/a\u003e \u003cbr\u003e\nThe \u003cem\u003efill()\u003c/em\u003e function wraps a single paragraph in text and returns a single string containing the wrapped paragraph. \u003c/p\u003e\n\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; import textwrap\n\u0026gt;\u0026gt;\u0026gt; string = \"This is a very very very very very long string.\"\n\u0026gt;\u0026gt;\u0026gt; print textwrap.fill(string,8)\nThis is\na very\nvery\nvery\nvery\nvery\nlong\nstring.\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e \u003ca class=\"btn btn-green\" style=\"margin-left: -2px; border-radius: 2px;\" href=\"/challenges/text-wrap/problem\"\u003e Solve Problem \u003c/a\u003e\u003c/p\u003e","sidebar":""}],"total_count":42774,"solved_count":42314,"success_ratio":0.9892458035255062,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":11766,"slug":"text-wrap","name":"Text Wrap","status":null,"created_at":"2015-08-28T04:29:42.000Z","updated_at":"2018-02-07T08:30:44.000Z","kind":"code","preview":"Wrap the given text in a fixed width.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonists tutorial","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":29746,"solved_count":29249,"success_ratio":0.9832918711759564,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":9629,"slug":"designer-door-mat","name":"Designer Door Mat","status":null,"created_at":"2015-08-04T13:05:51.000Z","updated_at":"2018-03-14T07:50:07.000Z","kind":"code","preview":"Print a designer door mat.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"python","checker_program":"\nimport json\nfrom sys import stdin\n\n\ndef check_inputs (inputs, outputs, signals ):\n    scores = []\n    valid = []\n    total_count = 0.0\n    total_correct = 0.0\n    iter_signal = 0\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n \n        count = len(inps.strip().split())\n        correct = -count*1.0\n \n        total_count += count\n \n        if signals[iter_signal] != 0 or len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            valid.append(0)\n\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                if inp == outp:\n                    correct+=2\n \n            total_correct += correct\n            correct /= count\n            if correct \u003e 0:\n                valid.append(1)\n            else:\n                valid.append(0)\n \n            iter_signal += 1\n \n    return valid, total_correct/total_count\n \ndef process(data):\n    valid, score = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"signals\"])\n    if score \u003c= 0:\n        score = 0\n    return score, valid\n \nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n \n    run_directory = stdin[0]\n \n    request = json.load(open(run_directory + \"request.json\"))\n \n \n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n \n        \"testcases\": request[\"testcase_sources\"],\n \n        \"lang\": request[\"lang\"],\n \n        \"expected_outputs\": request[\"expected_outputs\"],\n \n        \"outputs\": [],\n \n        \"signals\":[]\n    }\n \n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n \n\n    \n    score, testcase_status = process(data)                  \n\n    count = 0\n    for i in data[\"source\"].split('\\n'):\n        if set(i) == set([' ']) or set(i) == set(\"\"):\n            count += 1\n    if len(data[\"source\"].split('\\n')) \u003e int(6) + count:\n        score = 0\n        testcase_status = [0]*len(testcase_status)\n    \n    if score \u003c 1:\n        score = 0\n        testcase_status = [0]*len(testcase_status)\n          \n    print score\n    print \" \".join(str(i) for i in testcase_status)\n","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":1.0,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonista 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":28337,"solved_count":26174,"success_ratio":0.9236687016974274,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":8059,"slug":"python-string-formatting","name":"String Formatting","status":null,"created_at":"2015-04-28T19:08:45.000Z","updated_at":"2016-12-14T12:57:36.000Z","kind":"code","preview":"Print the formatted decimal, octal, hexadecimal, and binary values for $n$ integers.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","General Programming","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":19732,"solved_count":19281,"success_ratio":0.9771437259274275,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":14245,"slug":"alphabet-rangoli","name":"Alphabet Rangoli","status":null,"created_at":"2015-11-09T12:14:18.000Z","updated_at":"2016-12-14T13:22:14.000Z","kind":"code","preview":"Let's draw rangoli.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist 3","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":33495,"solved_count":27781,"success_ratio":0.8294073742349605,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":14254,"slug":"capitalize","name":"Capitalize!","status":null,"created_at":"2015-11-09T17:53:06.000Z","updated_at":"2018-06-01T10:21:15.000Z","kind":"code","preview":"Capitalize Each Word.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Strings","python","pythonist 3","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":22166,"solved_count":21716,"success_ratio":0.9796986375530091,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":11684,"slug":"itertools-product","name":"itertools.product()","status":null,"created_at":"2015-08-25T09:36:47.000Z","updated_at":"2016-12-08T08:34:00.000Z","kind":"code","preview":"Find the cartesian product of 2 sets. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorials","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":16358,"solved_count":16115,"success_ratio":0.9851448832375596,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":11694,"slug":"collections-counter","name":"collections.Counter()","status":null,"created_at":"2015-08-25T13:47:28.000Z","updated_at":"2016-12-08T08:34:09.000Z","kind":"code","preview":"Use a counter to sum the amount of money earned by the shoe shop owner. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorial","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":19688,"solved_count":19285,"success_ratio":0.9795306785859407,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":11685,"slug":"itertools-permutations","name":"itertools.permutations()","status":null,"created_at":"2015-08-25T12:18:13.000Z","updated_at":"2016-12-08T08:34:01.000Z","kind":"code","preview":"Find all permutations of a given size in a given string.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorials","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":19471,"solved_count":18299,"success_ratio":0.939807919469981,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":9951,"slug":"polar-coordinates","name":"Polar Coordinates","status":null,"created_at":"2015-08-21T04:31:49.000Z","updated_at":"2017-06-09T20:37:38.000Z","kind":"code","preview":"Convert complex numbers to polar coordinates","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorials","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":35447,"solved_count":34838,"success_ratio":0.9828194205433464,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9375,"slug":"py-introduction-to-sets","name":"Introduction to Sets","status":null,"created_at":"2015-07-22T11:22:52.000Z","updated_at":"2016-12-16T13:45:56.000Z","kind":"code","preview":"Use the set tool to compute the average. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python-sets","python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":12877,"solved_count":12517,"success_ratio":0.9720431777587948,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":124,"name":"Date and Time","slug":"py-date-time","track_id":12,"track_name":"Python","track_slug":"python"},"id":9649,"slug":"calendar-module","name":"Calendar Module","status":null,"created_at":"2015-08-05T08:17:50.000Z","updated_at":"2016-12-08T08:34:16.000Z","kind":"code","preview":"Print the day of a given date.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonista 2","Core CS","Language-Specific","Date and Time"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":13806,"solved_count":12852,"success_ratio":0.9308996088657105,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":8386,"slug":"defaultdict-tutorial","name":"DefaultDict Tutorial","status":null,"created_at":"2015-05-22T06:51:15.000Z","updated_at":"2018-06-18T10:03:58.000Z","kind":"code","preview":"Create dictionary value fields with predefined data types.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":14178,"solved_count":13674,"success_ratio":0.9644519678374948,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":126,"name":"Errors and Exceptions","slug":"errors-exceptions","track_id":12,"track_name":"Python","track_slug":"python"},"id":11765,"slug":"exceptions","name":"Exceptions","status":null,"created_at":"2015-08-28T04:14:11.000Z","updated_at":"2017-04-24T06:21:46.000Z","kind":"code","preview":"Handle errors detected during execution.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["Python Tutorials","python","Core CS","Language-Specific","Errors and Exceptions Handling"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10736,"solved_count":10498,"success_ratio":0.9778315946348733,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":11955,"slug":"py-collections-namedtuple","name":"Collections.namedtuple()","status":null,"created_at":"2015-09-03T14:31:49.000Z","updated_at":"2016-12-08T08:34:10.000Z","kind":"code","preview":"You need to turn tuples into convenient containers using collections.namedtuple().","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10660,"solved_count":10549,"success_ratio":0.9895872420262665,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":11975,"slug":"py-collections-ordereddict","name":"Collections.OrderedDict()","status":null,"created_at":"2015-09-04T14:28:54.000Z","updated_at":"2016-12-08T08:34:11.000Z","kind":"code","preview":"Print a dictionary of items that retains its order.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":35199,"solved_count":34548,"success_ratio":0.9815051563964885,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":1603,"slug":"symmetric-difference","name":"Symmetric Difference","status":null,"created_at":"2013-12-25T17:56:57.000Z","updated_at":"2016-12-08T08:33:41.000Z","kind":"code","preview":"Learn about sets as a data type.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9701492537313433,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":17216,"solved_count":16832,"success_ratio":0.9776951672862454,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":11692,"slug":"itertools-combinations","name":"itertools.combinations()","status":null,"created_at":"2015-08-25T13:40:12.000Z","updated_at":"2016-12-08T08:34:01.000Z","kind":"code","preview":"Print all the combinations of a string using itertools.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorial","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10043,"solved_count":9875,"success_ratio":0.9832719306979986,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":126,"name":"Errors and Exceptions","slug":"errors-exceptions","track_id":12,"track_name":"Python","track_slug":"python"},"id":12191,"slug":"incorrect-regex","name":"Incorrect Regex","status":null,"created_at":"2015-09-12T13:07:56.000Z","updated_at":"2016-12-08T08:34:20.000Z","kind":"code","preview":"Check whether the regex is valid or not.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific","Errors and Exceptions Handling"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":27824,"solved_count":27665,"success_ratio":0.9942855089131685,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9406,"slug":"py-set-add","name":"Set .add() ","status":null,"created_at":"2015-07-23T15:17:16.000Z","updated_at":"2016-12-08T08:33:43.000Z","kind":"code","preview":"Add elements to set.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":15604,"solved_count":15459,"success_ratio":0.9907075108946424,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":11693,"slug":"itertools-combinations-with-replacement","name":"itertools.combinations_with_replacement()","status":null,"created_at":"2015-08-25T13:42:08.000Z","updated_at":"2016-12-08T08:34:03.000Z","kind":"code","preview":"Find all the combinations of a string with replacements.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","pythonist tutorial","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":22107,"solved_count":21482,"success_ratio":0.9717284118152621,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9415,"slug":"py-set-discard-remove-pop","name":"Set .discard(), .remove() \u0026 .pop()","status":null,"created_at":"2015-07-24T06:30:02.000Z","updated_at":"2018-05-23T18:39:09.000Z","kind":"code","preview":"Different ways to omit set elements.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":9997,"solved_count":9854,"success_ratio":0.9856957087126138,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":11976,"slug":"py-collections-deque","name":"Collections.deque()","status":null,"created_at":"2015-09-04T14:30:18.000Z","updated_at":"2016-12-08T08:34:13.000Z","kind":"code","preview":"Perform multiple operations on a double-ended queue or deque.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":22436,"solved_count":22317,"success_ratio":0.9946960242467463,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9417,"slug":"py-set-union","name":"Set .union() Operation","status":null,"created_at":"2015-07-24T06:36:00.000Z","updated_at":"2016-12-08T08:33:46.000Z","kind":"code","preview":"Use the .union() operator to determine the number of students.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":22120,"solved_count":22042,"success_ratio":0.9964737793851718,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9419,"slug":"py-set-intersection-operation","name":"Set .intersection() Operation","status":null,"created_at":"2015-07-24T06:43:58.000Z","updated_at":"2016-12-08T08:33:47.000Z","kind":"code","preview":"Use the .intersection() operator to determine the number of same students in both sets. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":46560,"solved_count":46021,"success_ratio":0.9884235395189004,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":7887,"slug":"python-mod-divmod","name":"Mod Divmod","status":null,"created_at":"2015-04-20T10:25:51.000Z","updated_at":"2016-12-08T08:33:58.000Z","kind":"code","preview":"Get the quotient and remainder using the divmod operator in Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":45312,"solved_count":44958,"success_ratio":0.9921875,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":7885,"slug":"python-power-mod-power","name":"Power - Mod Power","status":null,"created_at":"2015-04-20T10:12:59.000Z","updated_at":"2016-12-08T08:33:58.000Z","kind":"code","preview":"Perform modular exponentiation in Python. ","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":22103,"solved_count":21999,"success_ratio":0.9952947563679139,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9420,"slug":"py-set-difference-operation","name":"Set .difference() Operation","status":null,"created_at":"2015-07-24T06:47:01.000Z","updated_at":"2016-12-08T08:33:48.000Z","kind":"code","preview":"Use the .difference() operator to check the differences between  sets.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":44899,"solved_count":44569,"success_ratio":0.9926501703824139,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":7882,"slug":"python-integers-come-in-all-sizes","name":"Integers Come In All Sizes","status":null,"created_at":"2015-04-20T08:15:34.000Z","updated_at":"2016-12-08T08:33:59.000Z","kind":"code","preview":"Exercises with big integers in Python.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"","checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":22038,"solved_count":21977,"success_ratio":0.9972320537253835,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9421,"slug":"py-set-symmetric-difference-operation","name":"Set .symmetric_difference() Operation","status":null,"created_at":"2015-07-24T06:49:09.000Z","updated_at":"2016-12-08T08:33:49.000Z","kind":"code","preview":"Making symmetric difference of sets.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":17679,"solved_count":17410,"success_ratio":0.9847842072515414,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9457,"slug":"py-set-mutations","name":"Set Mutations","status":null,"created_at":"2015-07-27T04:09:20.000Z","updated_at":"2016-12-08T08:33:50.000Z","kind":"code","preview":"Using various operations, change the content of a set and output the new sum.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":18453,"solved_count":16733,"success_ratio":0.9067902238118463,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":9060,"slug":"py-the-captains-room","name":"The Captain's Room ","status":null,"created_at":"2015-07-03T15:32:14.000Z","updated_at":"2016-12-08T08:33:51.000Z","kind":"code","preview":"Out of a list of room numbers, determine the number of the captain's room.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"python","checker_program":"import json\nfrom sys import stdin\n\n\ndef check_inputs (inputs, outputs, signals ):\n    scores = []\n    valid = []\n    total_count = 0.0\n    total_correct = 0.0\n    iter_signal = 0\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n \n        count = len(inps.strip().split())\n        correct = -count*1.0\n \n        total_count += count\n \n        if signals[iter_signal] != 0 or len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            valid.append(0)\n\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                if inp == outp:\n                    correct+=2\n \n            total_correct += correct\n            correct /= count\n            if correct \u003e 0:\n                valid.append(1)\n            else:\n                valid.append(0)\n \n            iter_signal += 1\n \n    return valid, total_correct/total_count\n \ndef process(data):\n    valid, score = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"signals\"])\n    if score \u003c= 0:\n        score = 0\n    return score, valid\n \nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n \n    run_directory = stdin[1]\n \n    request = json.load(open(run_directory + \"request.json\"))\n \n \n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n \n        \"testcases\": request[\"testcase_sources\"],\n \n        \"lang\": request[\"lang\"],\n \n        \"expected_outputs\": request[\"expected_outputs\"],\n \n        \"outputs\": [],\n \n        \"signals\":[]\n    }\n \n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n \n\n    \n    score, testcase_status = process(data)                  \n\n    for word in [\"import\"]:\n        flag1 = 0\n        for line in data[\"source\"].split('\\n'):\n            if word in line:\n                score = 0\n                #testcase_status = [0]*len(testcase_status)\n                flag1 = 1\n                break\n        if flag1 == 1:\n            break\n    print score\n    print \" \".join(str(i) for i in testcase_status)","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.9,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Easy","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]}],"first_unsolved_challenge":null,"total":90,"tutorial_signed_up":true,"current_track":{"id":12,"name":"Python","slug":"python","priority":8,"descriptions":"A step by step guide to Python, a language that is easy to pick up yet one of the most powerful.","rewards_system_enabled":null},"promo":{"meta":null,"type":"other"}}