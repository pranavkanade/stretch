{"models":[{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":171685,"solved_count":154925,"success_ratio":0.90237935754434,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":73,"name":"Introduction","slug":"py-introduction","track_id":12,"track_name":"Python","track_slug":"python"},"id":22727,"slug":"write-a-function","name":"Write a function","status":null,"created_at":"2016-07-08T09:36:55.000Z","updated_at":"2018-02-06T11:03:16.000Z","kind":"code","preview":"Write a function to check if the given year is leap or not","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.6,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["Implementation","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":40,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":40,"expert_solution_status":false,"custom_tabs":null,"total_count":25220,"solved_count":21779,"success_ratio":0.8635606661379858,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":9693,"slug":"the-minion-game","name":"The Minion Game","status":null,"created_at":"2015-08-07T10:47:22.000Z","updated_at":"2016-12-15T09:19:29.000Z","kind":"code","preview":"Given a string, judge the winner of the minion game.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["Strings","python","pythonist 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":40,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":40,"expert_solution_status":false,"custom_tabs":null,"total_count":19078,"solved_count":17781,"success_ratio":0.932015934584338,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":75,"name":"Strings","slug":"py-strings","track_id":12,"track_name":"Python","track_slug":"python"},"id":8703,"slug":"merge-the-tools","name":"Merge the Tools!","status":null,"created_at":"2015-06-11T13:28:59.000Z","updated_at":"2016-12-29T06:58:34.000Z","kind":"code","preview":" Split a string into subsegments of length $k$, then print each subsegment with any duplicate characters stripped out.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["Strings","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":8169,"solved_count":7594,"success_ratio":0.9296119476068062,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":124,"name":"Date and Time","slug":"py-date-time","track_id":12,"track_name":"Python","track_slug":"python"},"id":8212,"slug":"python-time-delta","name":"Time Delta","status":null,"created_at":"2015-05-10T00:38:27.000Z","updated_at":"2018-05-11T07:58:22.000Z","kind":"code","preview":"Find the absolute time difference.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific","Date and Time"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":16885,"solved_count":14632,"success_ratio":0.8665679597275688,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":9668,"slug":"find-angle","name":"Find Angle MBC","status":null,"created_at":"2015-08-06T04:45:43.000Z","updated_at":"2017-03-16T09:50:44.000Z","kind":"code","preview":"Find the desired angle in the right triangle.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","pythonist 2","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":50,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":50,"expert_solution_status":false,"custom_tabs":null,"total_count":28985,"solved_count":25120,"success_ratio":0.8666551664654132,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":120,"name":"Sets","slug":"py-sets","track_id":12,"track_name":"Python","track_slug":"python"},"id":8382,"slug":"no-idea","name":"No Idea!","status":null,"created_at":"2015-05-21T12:46:15.000Z","updated_at":"2016-12-08T08:33:42.000Z","kind":"code","preview":"Compute your happiness.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","set","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":50,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":50,"expert_solution_status":false,"custom_tabs":null,"total_count":14641,"solved_count":12971,"success_ratio":0.8859367529540332,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":8385,"slug":"word-order","name":"Word Order","status":null,"created_at":"2015-05-22T03:54:15.000Z","updated_at":"2016-12-08T08:34:12.000Z","kind":"code","preview":"List the number of occurrences of the words in order.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":15003,"solved_count":14709,"success_ratio":0.9804039192161568,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":8702,"slug":"compress-the-string","name":"Compress the String! ","status":null,"created_at":"2015-06-11T12:25:10.000Z","updated_at":"2016-12-08T08:34:04.000Z","kind":"code","preview":" groupby()","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":11184,"solved_count":9787,"success_ratio":0.8750894134477826,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":9698,"slug":"most-commons","name":"Company Logo","status":null,"created_at":"2015-08-07T14:54:50.000Z","updated_at":"2018-05-11T07:58:40.000Z","kind":"code","preview":"Print the number of character occurrences in descending order.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","pythonist 2","collections","Language Proficiency","Core Skills"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":50,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":50,"expert_solution_status":false,"custom_tabs":null,"total_count":9980,"solved_count":8998,"success_ratio":0.9016032064128257,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":123,"name":"Collections","slug":"py-collections","track_id":12,"track_name":"Python","track_slug":"python"},"id":8380,"slug":"piling-up","name":"Piling Up!","status":null,"created_at":"2015-05-21T10:44:26.000Z","updated_at":"2016-12-08T08:34:14.000Z","kind":"code","preview":"Create a vertical pile of cubes.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","collections","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":15833,"solved_count":15069,"success_ratio":0.9517463525547907,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":12523,"slug":"triangle-quest-2","name":"Triangle Quest 2","status":null,"created_at":"2015-09-20T04:08:20.000Z","updated_at":"2018-03-23T08:27:25.000Z","kind":"code","preview":"Create a palindromic triangle.","category":"ai","deleted":false,"company_id":null,"is_custom":true,"player_count":2,"custom_checker_language":"python","checker_program":"{\"custom_checker_head\":\"\\n# Start of HEAD\\nfrom __future__ import division, print_function, unicode_literals, absolute_import\\nimport json\\nimport string\\nimport sys\\n# End of HEAD\\n        \",\"custom_checker_body\":\"# Start of BODY\\n'''\\nTestStruct::\\ntestcase_id                   [int] ID of the test-case\\ntestcase_input_path           [str] File path to test-case input\\ntestcase_output_path          [str] File path to test-case output generated by the problem solver\\ntestcase_expected_output_path [str] File path to test-case expected output to be matched with\\nmetadata_file_paths           [list\u003cstr\u003e] File paths to Question metadata (Extra files usually used for defining traning sets)\\nsubmission_code_path          [str] File path to submission source code\\ntestcase_result               [bool] Set to True if test-case output matches test-case expected output. Matching is done line by line\\ntestcase_signal               [int] Exit code of the test-case process\\ntestcase_time                 [float] Time taken by the test-case process in seconds\\ntestcase_memory               [int] Peak memory of the test-case process determined in bytes\\ndata                          [str] \u003cFuture use\u003e\\nResultStruct::\\nresult      [bool]  Assign test-case result. True determines success. False determines failure\\nscore       [float] Assign test-case score. Normalized between 0 to 1\\nmessage     [str] Assign test-case message. This message is visible to the problem solver\\n'''\\n\\nfrom math import sqrt\\n\\ndef ERR(obj, msg = \\\"\\\"):\\n    obj.result = False\\n    obj.score = 0\\n    obj.message = 'Error reading result file.' + msg\\n\\ndef WA(obj, msg = \\\"\\\", score = 0.0):\\n    \\\"\\\"\\\"\\n    Populates given object with data indicating Wrong Answer result\\n    \\\"\\\"\\\"\\n    obj.result = False\\n    obj.score = score\\n    obj.message = \\\"Wrong Answer\\\\n\\\" + msg\\n    obj.testcase_signal = 99\\n    \\ndef TLE(obj, score = 0.0):\\n    obj.result = False\\n    obj.score = score\\n    obj.message += \\\"Time Limit Exceeded\\\"\\n    obj.testcase_signal = 10\\n        \\ndef ACC(obj, score = 1.0):\\n    \\\"\\\"\\\"\\n    Populates given object with data indicating Accepted result\\n    \\\"\\\"\\\"\\n    obj.result = True\\n    obj.score = score\\n    obj.message += \\\"Success\\\\n\\\"\\n\\ndef run_custom_checker(t_obj, r_obj):\\n    # Don't print anything to STDOUT in this function\\n    # Enter your custom checker scoring logic here\\n\\n    output_str = ''\\n    try:\\n        output_str = open(t_obj.testcase_output_path, 'r').read().strip()\\n        outputs = output_str.split(\\\"\\\\n\\\")\\n        exp_output_str = open(t_obj.testcase_expected_output_path, 'r').read().strip()\\n        exp_outputs = exp_output_str.split(\\\"\\\\n\\\")\\n        input_str = open(t_obj.testcase_input_path, 'r').read().strip()\\n        inputs = input_str.split(\\\"\\\\n\\\")\\n        source_code = open(t_obj.submission_code_path,'r').read().strip()\\n    except IOError:\\n        return ERR(r_obj)\\n\\n    if len(exp_outputs) != len(outputs):\\n        return WA(r_obj)\\n    score = 0.0\\n    for i, j in zip(exp_outputs, outputs):\\n        if i != j:\\n            return WA(r_obj)\\n    if source_code.count(\\\"print\\\") \u003e 1:\\n        return WA(r_obj, \\\"only 1 print statement is allowed\\\")\\n    if source_code.count(\\\"repr\\\") \u003e 0:\\n        return WA(r_obj, \\\"repr is not allowed\\\")\\n    if source_code.count(\\\"chr\\\") \u003e 0:\\n        return WA(r_obj, \\\"chr is not allowed\\\")\\n    if source_code.count(\\\"str\\\") \u003e 0:\\n        return WA(r_obj, \\\"str is not allowed\\\")\\n    if source_code.count(\\\"for\\\") \u003e 1:\\n        return WA(r_obj, \\\"only 1 for is allowed\\\")\\n    if source_code.count(\\\"'\\\") \u003e 0:\\n        return WA(r_obj, \\\"invalid string literal found\\\")\\n    if source_code.count('\\\"') \u003e 0:\\n        return WA(r_obj, \\\"invalid string literal found\\\")\\n    if source_code.count('`') \u003e 0:\\n        return WA(r_obj, \\\"invalid string literal found\\\")\\n    if len(source_code.split(\\\"\\\\n\\\")) \u003e 2:\\n        return WA(r_obj, \\\"more than two lines of code is not allowed\\\")\\n    return ACC(r_obj)\",\"custom_checker_tail\":\"\\n# Start of TAIL\\nclass TestStruct:\\n    def __init__(self):\\n        self.testcase_id = 0\\n        self.testcase_input_path = \\\"\\\"\\n        self.testcase_output_path = \\\"\\\"\\n        self.testcase_expected_output_path = \\\"\\\"\\n        self.metadata_file_paths = []\\n        self.submission_code_path = \\\"\\\"\\n        self.testcase_result = False\\n        self.testcase_signal = 0\\n        self.testcase_time = 0.0\\n        self.testcase_memory = 0\\n        self.data = \\\"\\\"\\n\\n\\nclass ResultStruct:\\n    def __init__(self):\\n        self.result = False\\n        self.score = 0.0\\n        self.message = \\\"\\\"\\n\\n\\ndef read_input_json(json_file_path, t_obj):\\n    file_obj = open(json_file_path, \\\"r\\\")\\n    json_file_contents = file_obj.read()\\n\\n    root = {}\\n    try:\\n        root = json.loads(json_file_contents)\\n    except ValueError:\\n        return 1\\n\\n    try:\\n        # Read values\\n        t_obj.testcase_id = root[\\\"testcase_id\\\"]\\n        t_obj.testcase_input_path = root[\\\"input_file_path\\\"]\\n        t_obj.testcase_output_path = root[\\\"output_file_path\\\"]\\n        t_obj.testcase_expected_output_path = root[\\\"expected_output_file_path\\\"]\\n        t_obj.metadata_file_paths = root[\\\"metadata_file_paths\\\"]\\n        t_obj.submission_code_path = root[\\\"submission_code_path\\\"]\\n        t_obj.testcase_result = root[\\\"testcase_result\\\"]\\n        t_obj.testcase_signal = root[\\\"testcase_signal\\\"]\\n        t_obj.testcase_time = root[\\\"testcase_time\\\"]\\n        t_obj.testcase_memory = root[\\\"testcase_memory\\\"]\\n        t_obj.data = root[\\\"data\\\"]\\n    except KeyError:\\n        return 1\\n\\n    return 0\\n\\n\\ndef write_result_json(r_obj):\\n    root = {\\n        \\\"custom_result\\\" : int(r_obj.result),\\n        \\\"custom_score\\\"  : max((r_obj.score if (r_obj.score \u003c= 1.0) else 1.0), 0),\\n        \\\"custom_message\\\": r_obj.message if (len(r_obj.message) \u003c= 4096) else r_obj.message[0:4095]\\n    }\\n\\n    print(json.dumps(root))\\n\\n\\nif __name__ ==  \\\"__main__\\\":\\n    # Input parameters\\n    t_obj = TestStruct()\\n    # Result parameters\\n    r_obj = ResultStruct()\\n\\n    if len(sys.argv) \u003c 2:\\n        write_result_json(r_obj)\\n        sys.exit(1)\\n\\n    # Decode input JSON\\n    failure = read_input_json(sys.argv[1], t_obj)\\n    # Incase input JSON was malformed or not existent\\n    if failure != 0:\\n        r_obj.message = \\\"Unable to read input json\\\";\\n        write_result_json(r_obj)\\n        sys.exit(2)\\n\\n    #Run the custom checker evaluator\\n    run_custom_checker(t_obj, r_obj)\\n\\n    # Encode result JSON\\n    write_result_json(r_obj)\\n    sys.exit(0)\\n# End of TAIL\\n        \"}","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":true,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","pythonist 3","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":40,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":40,"expert_solution_status":false,"custom_tabs":null,"total_count":12832,"solved_count":12409,"success_ratio":0.967035536159601,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":122,"name":"Itertools","slug":"py-itertools","track_id":12,"track_name":"Python","track_slug":"python"},"id":8679,"slug":"iterables-and-iterators","name":"Iterables and Iterators","status":null,"created_at":"2015-06-10T05:23:10.000Z","updated_at":"2016-12-08T08:34:05.000Z","kind":"code","preview":" Find the probability using itertools.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific","Itertools"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":27880,"solved_count":25316,"success_ratio":0.9080344332855094,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":121,"name":"Math","slug":"py-math","track_id":12,"track_name":"Python","track_slug":"python"},"id":7944,"slug":"python-quest-1","name":"Triangle Quest","status":null,"created_at":"2015-04-21T06:56:39.000Z","updated_at":"2018-03-23T07:27:46.000Z","kind":"code","preview":"Print a numeric triangle of height N-1 using only 2 lines.","category":"ai","deleted":false,"company_id":null,"is_custom":true,"player_count":2,"custom_checker_language":"python","checker_program":"{\"custom_checker_head\":\"\\n# Start of HEAD\\nfrom __future__ import division, print_function, unicode_literals, absolute_import\\nimport json\\nimport string\\nimport sys\\n# End of HEAD\\n        \",\"custom_checker_body\":\"# Start of BODY\\n'''\\nTestStruct::\\ntestcase_id                   [int] ID of the test-case\\ntestcase_input_path           [str] File path to test-case input\\ntestcase_output_path          [str] File path to test-case output generated by the problem solver\\ntestcase_expected_output_path [str] File path to test-case expected output to be matched with\\nmetadata_file_paths           [list\u003cstr\u003e] File paths to Question metadata (Extra files usually used for defining traning sets)\\nsubmission_code_path          [str] File path to submission source code\\ntestcase_result               [bool] Set to True if test-case output matches test-case expected output. Matching is done line by line\\ntestcase_signal               [int] Exit code of the test-case process\\ntestcase_time                 [float] Time taken by the test-case process in seconds\\ntestcase_memory               [int] Peak memory of the test-case process determined in bytes\\ndata                          [str] \u003cFuture use\u003e\\nResultStruct::\\nresult      [bool]  Assign test-case result. True determines success. False determines failure\\nscore       [float] Assign test-case score. Normalized between 0 to 1\\nmessage     [str] Assign test-case message. This message is visible to the problem solver\\n'''\\n\\nfrom math import sqrt\\n\\ndef ERR(obj, msg = \\\"\\\"):\\n    obj.result = False\\n    obj.score = 0\\n    obj.message = 'Error reading result file.' + msg\\n\\ndef WA(obj, msg = \\\"\\\", score = 0.0):\\n    \\\"\\\"\\\"\\n    Populates given object with data indicating Wrong Answer result\\n    \\\"\\\"\\\"\\n    obj.result = False\\n    obj.score = score\\n    obj.message = \\\"Wrong Answer\\\\n\\\" + msg\\n    obj.testcase_signal = 99\\n    \\ndef TLE(obj, score = 0.0):\\n    obj.result = False\\n    obj.score = score\\n    obj.message += \\\"Time Limit Exceeded\\\"\\n    obj.testcase_signal = 10\\n        \\ndef ACC(obj, score = 1.0):\\n    \\\"\\\"\\\"\\n    Populates given object with data indicating Accepted result\\n    \\\"\\\"\\\"\\n    obj.result = True\\n    obj.score = score\\n    obj.message += \\\"Success\\\\n\\\"\\n\\ndef run_custom_checker(t_obj, r_obj):\\n    # Don't print anything to STDOUT in this function\\n    # Enter your custom checker scoring logic here\\n\\n    output_str = ''\\n    try:\\n        output_str = open(t_obj.testcase_output_path, 'r').read().strip()\\n        outputs = output_str.split(\\\"\\\\n\\\")\\n        exp_output_str = open(t_obj.testcase_expected_output_path, 'r').read().strip()\\n        exp_outputs = exp_output_str.split(\\\"\\\\n\\\")\\n        input_str = open(t_obj.testcase_input_path, 'r').read().strip()\\n        inputs = input_str.split(\\\"\\\\n\\\")\\n        source_code = open(t_obj.submission_code_path,'r').read().strip()\\n    except IOError:\\n        return ERR(r_obj)\\n\\n    if len(exp_outputs) != len(outputs):\\n        return WA(r_obj)\\n    score = 0.0\\n    for i, j in zip(exp_outputs, outputs):\\n        if i != j:\\n            return WA(r_obj)\\n    if source_code.count(\\\"print\\\") \u003e 1:\\n        return WA(r_obj, \\\"only 1 print statement is allowed\\\")\\n    if source_code.count(\\\"repr\\\") \u003e 0:\\n        return WA(r_obj, \\\"repr is not allowed\\\")\\n    if source_code.count(\\\"chr\\\") \u003e 0:\\n        return WA(r_obj, \\\"chr is not allowed\\\")\\n    if source_code.count(\\\"str\\\") \u003e 0:\\n        return WA(r_obj, \\\"str is not allowed\\\")\\n    if source_code.count(\\\"for\\\") \u003e 1:\\n        return WA(r_obj, \\\"only 1 for is allowed\\\")\\n    if source_code.count(\\\"'\\\") \u003e 0:\\n        return WA(r_obj, \\\"invalid string literal found\\\")\\n    if source_code.count('\\\"') \u003e 0:\\n        return WA(r_obj, \\\"invalid string literal found\\\")\\n    if source_code.count('`') \u003e 0:\\n        return WA(r_obj, \\\"invalid string literal found\\\")\\n    if len(source_code.split(\\\"\\\\n\\\")) \u003e 2:\\n        return WA(r_obj, \\\"more than two lines of code is not allowed\\\")\\n    return ACC(r_obj)\\n\",\"custom_checker_tail\":\"\\n# Start of TAIL\\nclass TestStruct:\\n    def __init__(self):\\n        self.testcase_id = 0\\n        self.testcase_input_path = \\\"\\\"\\n        self.testcase_output_path = \\\"\\\"\\n        self.testcase_expected_output_path = \\\"\\\"\\n        self.metadata_file_paths = []\\n        self.submission_code_path = \\\"\\\"\\n        self.testcase_result = False\\n        self.testcase_signal = 0\\n        self.testcase_time = 0.0\\n        self.testcase_memory = 0\\n        self.data = \\\"\\\"\\n\\n\\nclass ResultStruct:\\n    def __init__(self):\\n        self.result = False\\n        self.score = 0.0\\n        self.message = \\\"\\\"\\n\\n\\ndef read_input_json(json_file_path, t_obj):\\n    file_obj = open(json_file_path, \\\"r\\\")\\n    json_file_contents = file_obj.read()\\n\\n    root = {}\\n    try:\\n        root = json.loads(json_file_contents)\\n    except ValueError:\\n        return 1\\n\\n    try:\\n        # Read values\\n        t_obj.testcase_id = root[\\\"testcase_id\\\"]\\n        t_obj.testcase_input_path = root[\\\"input_file_path\\\"]\\n        t_obj.testcase_output_path = root[\\\"output_file_path\\\"]\\n        t_obj.testcase_expected_output_path = root[\\\"expected_output_file_path\\\"]\\n        t_obj.metadata_file_paths = root[\\\"metadata_file_paths\\\"]\\n        t_obj.submission_code_path = root[\\\"submission_code_path\\\"]\\n        t_obj.testcase_result = root[\\\"testcase_result\\\"]\\n        t_obj.testcase_signal = root[\\\"testcase_signal\\\"]\\n        t_obj.testcase_time = root[\\\"testcase_time\\\"]\\n        t_obj.testcase_memory = root[\\\"testcase_memory\\\"]\\n        t_obj.data = root[\\\"data\\\"]\\n    except KeyError:\\n        return 1\\n\\n    return 0\\n\\n\\ndef write_result_json(r_obj):\\n    root = {\\n        \\\"custom_result\\\" : int(r_obj.result),\\n        \\\"custom_score\\\"  : max((r_obj.score if (r_obj.score \u003c= 1.0) else 1.0), 0),\\n        \\\"custom_message\\\": r_obj.message if (len(r_obj.message) \u003c= 4096) else r_obj.message[0:4095]\\n    }\\n\\n    print(json.dumps(root))\\n\\n\\nif __name__ ==  \\\"__main__\\\":\\n    # Input parameters\\n    t_obj = TestStruct()\\n    # Result parameters\\n    r_obj = ResultStruct()\\n\\n    if len(sys.argv) \u003c 2:\\n        write_result_json(r_obj)\\n        sys.exit(1)\\n\\n    # Decode input JSON\\n    failure = read_input_json(sys.argv[1], t_obj)\\n    # Incase input JSON was malformed or not existent\\n    if failure != 0:\\n        r_obj.message = \\\"Unable to read input json\\\";\\n        write_result_json(r_obj)\\n        sys.exit(2)\\n\\n    #Run the custom checker evaluator\\n    run_custom_checker(t_obj, r_obj)\\n\\n    # Encode result JSON\\n    write_result_json(r_obj)\\n    sys.exit(0)\\n# End of TAIL\\n        \"}","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":true,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":1.0,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":9238,"solved_count":8466,"success_ratio":0.9164321281662697,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":42,"name":"Classes","slug":"py-classes","track_id":12,"track_name":"Python","track_slug":"python"},"id":1653,"slug":"class-1-dealing-with-complex-numbers","name":"Classes: Dealing with Complex Numbers","status":null,"created_at":"2014-01-11T23:45:21.000Z","updated_at":"2016-12-18T13:32:51.000Z","kind":"code","preview":"Create a new data type for complex numbers.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["Classes","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":10527,"solved_count":10166,"success_ratio":0.9657072290301131,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":125,"name":"Built-Ins","slug":"py-built-ins","track_id":12,"track_name":"Python","track_slug":"python"},"id":8203,"slug":"python-sort-sort","name":"Athlete Sort","status":null,"created_at":"2015-05-09T01:24:11.000Z","updated_at":"2018-05-11T07:58:20.000Z","kind":"code","preview":"Sort the table on the kth attribute.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific","Python Builtins"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":40,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":40,"expert_solution_status":false,"custom_tabs":null,"total_count":8851,"solved_count":8459,"success_ratio":0.9557112190712914,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":125,"name":"Built-Ins","slug":"py-built-ins","track_id":12,"track_name":"Python","track_slug":"python"},"id":12499,"slug":"ginorts","name":"ginortS","status":null,"created_at":"2015-09-19T11:22:05.000Z","updated_at":"2018-04-22T09:01:12.000Z","kind":"code","preview":"An uneasy sort.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":"python","checker_program":"\nimport json\nfrom sys import stdin\n\n\ndef check_inputs (inputs, outputs, signals ):\n    scores = []\n    valid = []\n    total_count = 0.0\n    total_correct = 0.0\n    iter_signal = 0\n    for inps, outps in zip(inputs, outputs):\n        inps = inps.strip()\n        outps = outps.strip()\n \n        count = len(inps.strip().split())\n        correct = -count*1.0\n \n        total_count += count\n \n        if signals[iter_signal] != 0 or len(inps.split()) != len(outps.split()):\n            scores.append(0)\n            valid.append(0)\n\n        else:\n            for inp, outp in zip(inps.split(), outps.split()):\n                if inp == outp:\n                    correct+=2\n \n            total_correct += correct\n            correct /= count\n            if correct \u003e 0:\n                valid.append(1)\n            else:\n                valid.append(0)\n \n            iter_signal += 1\n \n    return valid, total_correct/total_count\n \ndef process(data):\n    valid, score = check_inputs(data[\"expected_outputs\"], data[\"outputs\"], data[\"signals\"])\n    if score \u003c= 0:\n        score = 0\n    return score, valid\n \nif __name__ ==  '__main__':\n    stdin = stdin.read().split('\\n')\n \n    run_directory = stdin[0]\n \n    request = json.load(open(run_directory + \"request.json\"))\n \n \n    data = {\n        # The submitted source code\n        \"source\": request[\"source\"],\n \n        \"testcases\": request[\"testcase_sources\"],\n \n        \"lang\": request[\"lang\"],\n \n        \"expected_outputs\": request[\"expected_outputs\"],\n \n        \"outputs\": [],\n \n        \"signals\":[]\n    }\n \n    data[\"signals\"] = map( int, open( \"signal00.sig\" ).read().strip().split() )\n    for index in range(len(request[\"testcase_sources\"])):\n        output = open(run_directory + \"output%05d.out\" %(index)).read()\n        data[\"outputs\"].append(output)\n \n\n    \n    score, testcase_status = process(data)                  \n\n    for word in [\"for\",\"while\",\"join\"]:\n        flag1 = 0\n        for line in data[\"source\"].split('\\n'):\n            if word in line:\n                score = 0\n                testcase_status = [0]*len(testcase_status)\n                flag1 = 1\n                break\n        if flag1 == 1:\n            break\n    count = 0\n    for line in data[\"source\"].split('\\n'):\n        if 'sorted' in line:\n            count += 1\n        if count \u003e 1:\n            score = 0\n            testcase_status = [0]*len(testcase_status)\n            break\n        \n#    if score \u003c 1:\n#        score = 0\n#        testcase_status = [0]*len(testcase_status)\n          \n    print score\n    print \" \".join(str(i) for i in testcase_status)\n","judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","pythonist 3","Core CS","Language-Specific","Python Builtins"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":10449,"solved_count":9152,"success_ratio":0.8758732893099818,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":87,"name":"Python Functionals","slug":"py-functionals","track_id":12,"track_name":"Python","track_slug":"python"},"id":1565,"slug":"validate-list-of-email-address-with-filter","name":"Validating Email Addresses With a Filter ","status":null,"created_at":"2013-12-18T21:48:16.000Z","updated_at":"2016-12-16T03:12:26.000Z","kind":"code","preview":"This question covers the concept of filters.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7817460317460317,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific","Functionals"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":7429,"solved_count":7345,"success_ratio":0.9886929600215372,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":87,"name":"Python Functionals","slug":"py-functionals","track_id":12,"track_name":"Python","track_slug":"python"},"id":29250,"slug":"reduce-function","name":"Reduce Function","status":null,"created_at":"2016-12-05T12:03:42.000Z","updated_at":"2017-02-15T06:39:30.000Z","kind":"code","preview":"Python Practice","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":false,"can_solve":true,"company":null,"difficulty":0.6,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python","Core CS","Language-Specific","Functionals"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":20,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":20,"expert_solution_status":false,"custom_tabs":null,"total_count":5689,"solved_count":5213,"success_ratio":0.916329759184391,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":11637,"slug":"re-sub-regex-substitution","name":"Regex Substitution","status":null,"created_at":"2015-08-23T10:52:41.000Z","updated_at":"2016-12-08T08:34:36.000Z","kind":"code","preview":"Substitute a string using regex tools.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["RegEx","python","pythonist tutorial","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":40,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":40,"expert_solution_status":false,"custom_tabs":null,"total_count":4651,"solved_count":4452,"success_ratio":0.9572135024725865,"is_editorial_available":true,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":88,"name":"Regex and Parsing","slug":"py-regex","track_id":12,"track_name":"Python","track_slug":"python"},"id":12186,"slug":"validating-credit-card-number","name":"Validating Credit Card Numbers","status":null,"created_at":"2015-09-12T13:02:45.000Z","updated_at":"2018-05-23T18:38:18.000Z","kind":"code","preview":"Verify whether credit card numbers are valid or not.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.7,"color":null,"solved_score":0.5,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["RegEx","python","Core CS","Language-Specific"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":10,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":10,"expert_solution_status":false,"custom_tabs":null,"total_count":2073,"solved_count":1987,"success_ratio":0.9585142305836951,"is_editorial_available":false,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":160,"name":"Debugging","slug":"py-debugging","track_id":12,"track_name":"Python","track_slug":"python"},"id":66426,"slug":"words-score","name":"Words Score","status":null,"created_at":"2018-04-03T20:45:24.000Z","updated_at":"2018-08-27T13:24:40.000Z","kind":"code","preview":"Calculate the total score of the list of words.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":true,"can_solve":true,"company":null,"difficulty":0.6,"color":null,"solved_score":1.0,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python"]},{"can_be_viewed":true,"dynamic":false,"has_started":true,"has_ended":false,"countdown_time":0,"requirements_description":null,"max_score":30,"active":true,"epoch_starttime":null,"epoch_endtime":null,"time_left":null,"factor":30,"expert_solution_status":false,"custom_tabs":null,"total_count":1885,"solved_count":1548,"success_ratio":0.8212201591511936,"is_editorial_available":false,"is_solution_unlocked":false,"contest_slug":"master","topics":[],"user_score":0,"track":{"id":160,"name":"Debugging","slug":"py-debugging","track_id":12,"track_name":"Python","track_slug":"python"},"id":66403,"slug":"default-arguments","name":"Default Arguments","status":null,"created_at":"2018-04-03T15:36:45.000Z","updated_at":"2018-06-18T09:01:55.000Z","kind":"code","preview":"Debug a function which uses a default value for one of its arguments.","category":"ai","deleted":false,"company_id":null,"is_custom":false,"player_count":2,"custom_checker_language":null,"checker_program":null,"judgebot_language":null,"judgebot":null,"onboarding":null,"compile_and_test":true,"is_text":false,"custom":false,"custom_case":true,"submit_disabled":false,"public_test_cases":true,"public_solutions":false,"can_solve":true,"company":null,"difficulty":0.6,"color":null,"solved_score":1.0,"preview_format":null,"difficulty_name":"Medium","hints":[],"tag_names":["python"]}],"first_unsolved_challenge":null,"total":22,"tutorial_signed_up":true,"current_track":{"id":12,"name":"Python","slug":"python","priority":8,"descriptions":"A step by step guide to Python, a language that is easy to pick up yet one of the most powerful.","rewards_system_enabled":null},"promo":{"meta":null,"type":"other"}}